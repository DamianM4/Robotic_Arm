
ELEKTRO_PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002200  08002200  00012200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002228  08002228  00012228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800222c  0800222c  0001222c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  08002230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000170  20000028  08002258  00020028  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000198  08002258  00020198  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013f42  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000286e  00000000  00000000  00033f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000065c4  00000000  00000000  00036801  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000920  00000000  00000000  0003cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c38  00000000  00000000  0003d6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000053ec  00000000  00000000  0003e320  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000038bc  00000000  00000000  0004370c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00046fc8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001b3c  00000000  00000000  00047044  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	080021e8 	.word	0x080021e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	080021e8 	.word	0x080021e8

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	bf14      	ite	ne
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800044c:	e720      	b.n	8000290 <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_ul2d>:
 8000450:	ea50 0201 	orrs.w	r2, r0, r1
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	b530      	push	{r4, r5, lr}
 800045a:	f04f 0500 	mov.w	r5, #0
 800045e:	e00a      	b.n	8000476 <__aeabi_l2d+0x16>

08000460 <__aeabi_l2d>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800046e:	d502      	bpl.n	8000476 <__aeabi_l2d+0x16>
 8000470:	4240      	negs	r0, r0
 8000472:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000476:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000482:	f43f aedc 	beq.w	800023e <__adddf3+0xe6>
 8000486:	f04f 0203 	mov.w	r2, #3
 800048a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800048e:	bf18      	it	ne
 8000490:	3203      	addne	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800049e:	f1c2 0320 	rsb	r3, r2, #32
 80004a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ae:	ea40 000e 	orr.w	r0, r0, lr
 80004b2:	fa21 f102 	lsr.w	r1, r1, r2
 80004b6:	4414      	add	r4, r2
 80004b8:	e6c1      	b.n	800023e <__adddf3+0xe6>
 80004ba:	bf00      	nop

080004bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004bc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <HAL_InitTick+0x3c>)
{
 80004c0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c2:	7818      	ldrb	r0, [r3, #0]
 80004c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004c8:	fbb3 f3f0 	udiv	r3, r3, r0
 80004cc:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <HAL_InitTick+0x40>)
 80004ce:	6810      	ldr	r0, [r2, #0]
 80004d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80004d4:	f000 fa50 	bl	8000978 <HAL_SYSTICK_Config>
 80004d8:	4604      	mov	r4, r0
 80004da:	b958      	cbnz	r0, 80004f4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004dc:	2d0f      	cmp	r5, #15
 80004de:	d809      	bhi.n	80004f4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004e0:	4602      	mov	r2, r0
 80004e2:	4629      	mov	r1, r5
 80004e4:	f04f 30ff 	mov.w	r0, #4294967295
 80004e8:	f000 fa06 	bl	80008f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <HAL_InitTick+0x44>)
 80004ee:	4620      	mov	r0, r4
 80004f0:	601d      	str	r5, [r3, #0]
 80004f2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80004f4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80004f6:	bd38      	pop	{r3, r4, r5, pc}
 80004f8:	20000000 	.word	0x20000000
 80004fc:	20000024 	.word	0x20000024
 8000500:	20000004 	.word	0x20000004

08000504 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	4a07      	ldr	r2, [pc, #28]	; (8000524 <HAL_Init+0x20>)
{
 8000506:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800050c:	f043 0310 	orr.w	r3, r3, #16
 8000510:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000512:	f000 f9df 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000516:	2000      	movs	r0, #0
 8000518:	f7ff ffd0 	bl	80004bc <HAL_InitTick>
  HAL_MspInit();
 800051c:	f001 fcc6 	bl	8001eac <HAL_MspInit>
}
 8000520:	2000      	movs	r0, #0
 8000522:	bd08      	pop	{r3, pc}
 8000524:	40022000 	.word	0x40022000

08000528 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000528:	4a03      	ldr	r2, [pc, #12]	; (8000538 <HAL_IncTick+0x10>)
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <HAL_IncTick+0x14>)
 800052c:	6811      	ldr	r1, [r2, #0]
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	440b      	add	r3, r1
 8000532:	6013      	str	r3, [r2, #0]
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000044 	.word	0x20000044
 800053c:	20000000 	.word	0x20000000

08000540 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000540:	4b01      	ldr	r3, [pc, #4]	; (8000548 <HAL_GetTick+0x8>)
 8000542:	6818      	ldr	r0, [r3, #0]
}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20000044 	.word	0x20000044

0800054c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800054c:	6803      	ldr	r3, [r0, #0]
 800054e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000550:	4770      	bx	lr
	...

08000554 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000554:	2300      	movs	r3, #0
{ 
 8000556:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000558:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800055a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800055e:	2b01      	cmp	r3, #1
 8000560:	d074      	beq.n	800064c <HAL_ADC_ConfigChannel+0xf8>
 8000562:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000564:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000566:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800056a:	2d06      	cmp	r5, #6
 800056c:	6802      	ldr	r2, [r0, #0]
 800056e:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000572:	680c      	ldr	r4, [r1, #0]
 8000574:	d825      	bhi.n	80005c2 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000576:	442b      	add	r3, r5
 8000578:	251f      	movs	r5, #31
 800057a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800057c:	3b05      	subs	r3, #5
 800057e:	409d      	lsls	r5, r3
 8000580:	ea26 0505 	bic.w	r5, r6, r5
 8000584:	fa04 f303 	lsl.w	r3, r4, r3
 8000588:	432b      	orrs	r3, r5
 800058a:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800058c:	2c09      	cmp	r4, #9
 800058e:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000592:	688d      	ldr	r5, [r1, #8]
 8000594:	d92f      	bls.n	80005f6 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000596:	2607      	movs	r6, #7
 8000598:	4423      	add	r3, r4
 800059a:	68d1      	ldr	r1, [r2, #12]
 800059c:	3b1e      	subs	r3, #30
 800059e:	409e      	lsls	r6, r3
 80005a0:	ea21 0106 	bic.w	r1, r1, r6
 80005a4:	fa05 f303 	lsl.w	r3, r5, r3
 80005a8:	430b      	orrs	r3, r1
 80005aa:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80005ac:	f1a4 0310 	sub.w	r3, r4, #16
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d92b      	bls.n	800060c <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005b4:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80005bc:	4618      	mov	r0, r3
 80005be:	b002      	add	sp, #8
 80005c0:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80005c2:	2d0c      	cmp	r5, #12
 80005c4:	d80b      	bhi.n	80005de <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80005c6:	442b      	add	r3, r5
 80005c8:	251f      	movs	r5, #31
 80005ca:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80005cc:	3b23      	subs	r3, #35	; 0x23
 80005ce:	409d      	lsls	r5, r3
 80005d0:	ea26 0505 	bic.w	r5, r6, r5
 80005d4:	fa04 f303 	lsl.w	r3, r4, r3
 80005d8:	432b      	orrs	r3, r5
 80005da:	6313      	str	r3, [r2, #48]	; 0x30
 80005dc:	e7d6      	b.n	800058c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80005de:	442b      	add	r3, r5
 80005e0:	251f      	movs	r5, #31
 80005e2:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80005e4:	3b41      	subs	r3, #65	; 0x41
 80005e6:	409d      	lsls	r5, r3
 80005e8:	ea26 0505 	bic.w	r5, r6, r5
 80005ec:	fa04 f303 	lsl.w	r3, r4, r3
 80005f0:	432b      	orrs	r3, r5
 80005f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005f4:	e7ca      	b.n	800058c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80005f6:	2607      	movs	r6, #7
 80005f8:	6911      	ldr	r1, [r2, #16]
 80005fa:	4423      	add	r3, r4
 80005fc:	409e      	lsls	r6, r3
 80005fe:	ea21 0106 	bic.w	r1, r1, r6
 8000602:	fa05 f303 	lsl.w	r3, r5, r3
 8000606:	430b      	orrs	r3, r1
 8000608:	6113      	str	r3, [r2, #16]
 800060a:	e7cf      	b.n	80005ac <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <HAL_ADC_ConfigChannel+0xfc>)
 800060e:	429a      	cmp	r2, r3
 8000610:	d116      	bne.n	8000640 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000612:	6893      	ldr	r3, [r2, #8]
 8000614:	021b      	lsls	r3, r3, #8
 8000616:	d4cd      	bmi.n	80005b4 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000618:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800061a:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800061c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000620:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000622:	d1c7      	bne.n	80005b4 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <HAL_ADC_ConfigChannel+0x100>)
 8000626:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <HAL_ADC_ConfigChannel+0x104>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	fbb3 f2f2 	udiv	r2, r3, r2
 800062e:	230a      	movs	r3, #10
 8000630:	4353      	muls	r3, r2
            wait_loop_index--;
 8000632:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000634:	9b01      	ldr	r3, [sp, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d0bc      	beq.n	80005b4 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800063a:	9b01      	ldr	r3, [sp, #4]
 800063c:	3b01      	subs	r3, #1
 800063e:	e7f8      	b.n	8000632 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000640:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000642:	f043 0320 	orr.w	r3, r3, #32
 8000646:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000648:	2301      	movs	r3, #1
 800064a:	e7b4      	b.n	80005b6 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 800064c:	2302      	movs	r3, #2
 800064e:	e7b5      	b.n	80005bc <HAL_ADC_ConfigChannel+0x68>
 8000650:	40012400 	.word	0x40012400
 8000654:	20000024 	.word	0x20000024
 8000658:	000f4240 	.word	0x000f4240

0800065c <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 800065c:	2300      	movs	r3, #0
{
 800065e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000660:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000662:	6803      	ldr	r3, [r0, #0]
{
 8000664:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000666:	689a      	ldr	r2, [r3, #8]
 8000668:	07d2      	lsls	r2, r2, #31
 800066a:	d502      	bpl.n	8000672 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800066c:	2000      	movs	r0, #0
}
 800066e:	b002      	add	sp, #8
 8000670:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000672:	689a      	ldr	r2, [r3, #8]
 8000674:	f042 0201 	orr.w	r2, r2, #1
 8000678:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <ADC_Enable+0x68>)
 800067c:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <ADC_Enable+0x6c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000684:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000686:	9b01      	ldr	r3, [sp, #4]
 8000688:	b9c3      	cbnz	r3, 80006bc <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800068a:	f7ff ff59 	bl	8000540 <HAL_GetTick>
 800068e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000690:	6823      	ldr	r3, [r4, #0]
 8000692:	689d      	ldr	r5, [r3, #8]
 8000694:	f015 0501 	ands.w	r5, r5, #1
 8000698:	d1e8      	bne.n	800066c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800069a:	f7ff ff51 	bl	8000540 <HAL_GetTick>
 800069e:	1b80      	subs	r0, r0, r6
 80006a0:	2802      	cmp	r0, #2
 80006a2:	d9f5      	bls.n	8000690 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80006a6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80006b2:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006ba:	e7d8      	b.n	800066e <ADC_Enable+0x12>
      wait_loop_index--;
 80006bc:	9b01      	ldr	r3, [sp, #4]
 80006be:	3b01      	subs	r3, #1
 80006c0:	e7e0      	b.n	8000684 <ADC_Enable+0x28>
 80006c2:	bf00      	nop
 80006c4:	20000024 	.word	0x20000024
 80006c8:	000f4240 	.word	0x000f4240

080006cc <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 80006cc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80006d0:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80006d2:	2b01      	cmp	r3, #1
{
 80006d4:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80006d6:	d054      	beq.n	8000782 <HAL_ADC_Start+0xb6>
 80006d8:	2301      	movs	r3, #1
 80006da:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80006de:	f7ff ffbd 	bl	800065c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80006e2:	2800      	cmp	r0, #0
 80006e4:	d149      	bne.n	800077a <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 80006e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80006e8:	4a27      	ldr	r2, [pc, #156]	; (8000788 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 80006ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006ee:	f023 0301 	bic.w	r3, r3, #1
 80006f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f6:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80006f8:	6823      	ldr	r3, [r4, #0]
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d104      	bne.n	8000708 <HAL_ADC_Start+0x3c>
 80006fe:	4923      	ldr	r1, [pc, #140]	; (800078c <HAL_ADC_Start+0xc0>)
 8000700:	684a      	ldr	r2, [r1, #4]
 8000702:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000706:	d12e      	bne.n	8000766 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000708:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800070a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800070e:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000710:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000712:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000714:	bf41      	itttt	mi
 8000716:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8000718:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800071c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000720:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000722:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000724:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000728:	bf1c      	itt	ne
 800072a:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 800072c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000730:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8000732:	2200      	movs	r2, #0
 8000734:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000738:	f06f 0202 	mvn.w	r2, #2
 800073c:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800073e:	689a      	ldr	r2, [r3, #8]
 8000740:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000744:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000748:	d113      	bne.n	8000772 <HAL_ADC_Start+0xa6>
 800074a:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <HAL_ADC_Start+0xbc>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d105      	bne.n	800075c <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000750:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000754:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000756:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800075a:	d10a      	bne.n	8000772 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800075c:	689a      	ldr	r2, [r3, #8]
 800075e:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000766:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000768:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800076c:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800076e:	684a      	ldr	r2, [r1, #4]
 8000770:	e7cf      	b.n	8000712 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000772:	689a      	ldr	r2, [r3, #8]
 8000774:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000778:	e7f3      	b.n	8000762 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800077a:	2300      	movs	r3, #0
 800077c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000780:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000782:	2002      	movs	r0, #2
}
 8000784:	bd10      	pop	{r4, pc}
 8000786:	bf00      	nop
 8000788:	40012800 	.word	0x40012800
 800078c:	40012400 	.word	0x40012400

08000790 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000790:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000792:	6803      	ldr	r3, [r0, #0]
{
 8000794:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000796:	689a      	ldr	r2, [r3, #8]
 8000798:	07d2      	lsls	r2, r2, #31
 800079a:	d401      	bmi.n	80007a0 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800079c:	2000      	movs	r0, #0
 800079e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80007a0:	689a      	ldr	r2, [r3, #8]
 80007a2:	f022 0201 	bic.w	r2, r2, #1
 80007a6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80007a8:	f7ff feca 	bl	8000540 <HAL_GetTick>
 80007ac:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80007ae:	6823      	ldr	r3, [r4, #0]
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	07db      	lsls	r3, r3, #31
 80007b4:	d5f2      	bpl.n	800079c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80007b6:	f7ff fec3 	bl	8000540 <HAL_GetTick>
 80007ba:	1b40      	subs	r0, r0, r5
 80007bc:	2802      	cmp	r0, #2
 80007be:	d9f6      	bls.n	80007ae <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007c2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007c4:	f043 0310 	orr.w	r3, r3, #16
 80007c8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007d2:	bd38      	pop	{r3, r4, r5, pc}

080007d4 <HAL_ADC_Init>:
{
 80007d4:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 80007d6:	4604      	mov	r4, r0
 80007d8:	2800      	cmp	r0, #0
 80007da:	d071      	beq.n	80008c0 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80007de:	b923      	cbnz	r3, 80007ea <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80007e0:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80007e2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80007e6:	f001 fb83 	bl	8001ef0 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007ea:	4620      	mov	r0, r4
 80007ec:	f7ff ffd0 	bl	8000790 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007f2:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80007f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007f8:	d164      	bne.n	80008c4 <HAL_ADC_Init+0xf0>
 80007fa:	2800      	cmp	r0, #0
 80007fc:	d162      	bne.n	80008c4 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80007fe:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000800:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000804:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000806:	f023 0302 	bic.w	r3, r3, #2
 800080a:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800080e:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000810:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000812:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000814:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000816:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800081a:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800081e:	d038      	beq.n	8000892 <HAL_ADC_Init+0xbe>
 8000820:	2901      	cmp	r1, #1
 8000822:	bf14      	ite	ne
 8000824:	4606      	movne	r6, r0
 8000826:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800082a:	6965      	ldr	r5, [r4, #20]
 800082c:	2d01      	cmp	r5, #1
 800082e:	d107      	bne.n	8000840 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000830:	2b00      	cmp	r3, #0
 8000832:	d130      	bne.n	8000896 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000834:	69a3      	ldr	r3, [r4, #24]
 8000836:	3b01      	subs	r3, #1
 8000838:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 800083c:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000840:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000842:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000846:	685d      	ldr	r5, [r3, #4]
 8000848:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800084c:	ea45 0506 	orr.w	r5, r5, r6
 8000850:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000852:	689e      	ldr	r6, [r3, #8]
 8000854:	4d1d      	ldr	r5, [pc, #116]	; (80008cc <HAL_ADC_Init+0xf8>)
 8000856:	ea05 0506 	and.w	r5, r5, r6
 800085a:	ea45 0502 	orr.w	r5, r5, r2
 800085e:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000860:	d001      	beq.n	8000866 <HAL_ADC_Init+0x92>
 8000862:	2901      	cmp	r1, #1
 8000864:	d120      	bne.n	80008a8 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000866:	6921      	ldr	r1, [r4, #16]
 8000868:	3901      	subs	r1, #1
 800086a:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800086c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800086e:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000872:	4329      	orrs	r1, r5
 8000874:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000876:	6899      	ldr	r1, [r3, #8]
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <HAL_ADC_Init+0xfc>)
 800087a:	400b      	ands	r3, r1
 800087c:	429a      	cmp	r2, r3
 800087e:	d115      	bne.n	80008ac <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000880:	2300      	movs	r3, #0
 8000882:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000884:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000886:	f023 0303 	bic.w	r3, r3, #3
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000890:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000892:	460e      	mov	r6, r1
 8000894:	e7c9      	b.n	800082a <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000896:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800089e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008a6:	e7cb      	b.n	8000840 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80008a8:	2100      	movs	r1, #0
 80008aa:	e7df      	b.n	800086c <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80008ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80008ae:	f023 0312 	bic.w	r3, r3, #18
 80008b2:	f043 0310 	orr.w	r3, r3, #16
 80008b6:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80008c0:	2001      	movs	r0, #1
}
 80008c2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008c4:	f043 0310 	orr.w	r3, r3, #16
 80008c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80008ca:	e7f9      	b.n	80008c0 <HAL_ADC_Init+0xec>
 80008cc:	ffe1f7fd 	.word	0xffe1f7fd
 80008d0:	ff1f0efe 	.word	0xff1f0efe

080008d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008d6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008e2:	041b      	lsls	r3, r3, #16
 80008e4:	0c1b      	lsrs	r3, r3, #16
 80008e6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80008ee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80008f0:	60d3      	str	r3, [r2, #12]
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008fa:	b530      	push	{r4, r5, lr}
 80008fc:	68dc      	ldr	r4, [r3, #12]
 80008fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000902:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000906:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000908:	2b04      	cmp	r3, #4
 800090a:	bf28      	it	cs
 800090c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000914:	bf98      	it	ls
 8000916:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	fa05 f303 	lsl.w	r3, r5, r3
 800091c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000920:	bf88      	it	hi
 8000922:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	4019      	ands	r1, r3
 8000926:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000928:	fa05 f404 	lsl.w	r4, r5, r4
 800092c:	3c01      	subs	r4, #1
 800092e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000930:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000932:	ea42 0201 	orr.w	r2, r2, r1
 8000936:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093a:	bfaf      	iteee	ge
 800093c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000940:	4b06      	ldrlt	r3, [pc, #24]	; (800095c <HAL_NVIC_SetPriority+0x64>)
 8000942:	f000 000f 	andlt.w	r0, r0, #15
 8000946:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	bfa5      	ittet	ge
 800094a:	b2d2      	uxtbge	r2, r2
 800094c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000950:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000952:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000956:	bd30      	pop	{r4, r5, pc}
 8000958:	e000ed00 	.word	0xe000ed00
 800095c:	e000ed14 	.word	0xe000ed14

08000960 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000960:	2301      	movs	r3, #1
 8000962:	0942      	lsrs	r2, r0, #5
 8000964:	f000 001f 	and.w	r0, r0, #31
 8000968:	fa03 f000 	lsl.w	r0, r3, r0
 800096c:	4b01      	ldr	r3, [pc, #4]	; (8000974 <HAL_NVIC_EnableIRQ+0x14>)
 800096e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000972:	4770      	bx	lr
 8000974:	e000e100 	.word	0xe000e100

08000978 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000978:	3801      	subs	r0, #1
 800097a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800097e:	d20a      	bcs.n	8000996 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000980:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000986:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800098c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000990:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000996:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000e010 	.word	0xe000e010
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80009a8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80009aa:	4616      	mov	r6, r2
 80009ac:	4b65      	ldr	r3, [pc, #404]	; (8000b44 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ae:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000b54 <HAL_GPIO_Init+0x1b0>
 80009b2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000b58 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80009b6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ba:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80009bc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009c0:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80009c4:	45a0      	cmp	r8, r4
 80009c6:	d17f      	bne.n	8000ac8 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80009c8:	684d      	ldr	r5, [r1, #4]
 80009ca:	2d12      	cmp	r5, #18
 80009cc:	f000 80af 	beq.w	8000b2e <HAL_GPIO_Init+0x18a>
 80009d0:	f200 8088 	bhi.w	8000ae4 <HAL_GPIO_Init+0x140>
 80009d4:	2d02      	cmp	r5, #2
 80009d6:	f000 80a7 	beq.w	8000b28 <HAL_GPIO_Init+0x184>
 80009da:	d87c      	bhi.n	8000ad6 <HAL_GPIO_Init+0x132>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	f000 808e 	beq.w	8000afe <HAL_GPIO_Init+0x15a>
 80009e2:	2d01      	cmp	r5, #1
 80009e4:	f000 809e 	beq.w	8000b24 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009e8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009ec:	2cff      	cmp	r4, #255	; 0xff
 80009ee:	bf93      	iteet	ls
 80009f0:	4682      	movls	sl, r0
 80009f2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80009f6:	3d08      	subhi	r5, #8
 80009f8:	f8d0 b000 	ldrls.w	fp, [r0]
 80009fc:	bf92      	itee	ls
 80009fe:	00b5      	lslls	r5, r6, #2
 8000a00:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000a04:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a06:	fa09 f805 	lsl.w	r8, r9, r5
 8000a0a:	ea2b 0808 	bic.w	r8, fp, r8
 8000a0e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a12:	bf88      	it	hi
 8000a14:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a18:	ea48 0505 	orr.w	r5, r8, r5
 8000a1c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a20:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000a24:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000a28:	d04e      	beq.n	8000ac8 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a2a:	4d47      	ldr	r5, [pc, #284]	; (8000b48 <HAL_GPIO_Init+0x1a4>)
 8000a2c:	4f46      	ldr	r7, [pc, #280]	; (8000b48 <HAL_GPIO_Init+0x1a4>)
 8000a2e:	69ad      	ldr	r5, [r5, #24]
 8000a30:	f026 0803 	bic.w	r8, r6, #3
 8000a34:	f045 0501 	orr.w	r5, r5, #1
 8000a38:	61bd      	str	r5, [r7, #24]
 8000a3a:	69bd      	ldr	r5, [r7, #24]
 8000a3c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000a40:	f005 0501 	and.w	r5, r5, #1
 8000a44:	9501      	str	r5, [sp, #4]
 8000a46:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a4a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a4e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a50:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000a54:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a58:	fa09 f90b 	lsl.w	r9, r9, fp
 8000a5c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a60:	4d3a      	ldr	r5, [pc, #232]	; (8000b4c <HAL_GPIO_Init+0x1a8>)
 8000a62:	42a8      	cmp	r0, r5
 8000a64:	d068      	beq.n	8000b38 <HAL_GPIO_Init+0x194>
 8000a66:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a6a:	42a8      	cmp	r0, r5
 8000a6c:	d066      	beq.n	8000b3c <HAL_GPIO_Init+0x198>
 8000a6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a72:	42a8      	cmp	r0, r5
 8000a74:	d064      	beq.n	8000b40 <HAL_GPIO_Init+0x19c>
 8000a76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a7a:	42a8      	cmp	r0, r5
 8000a7c:	bf0c      	ite	eq
 8000a7e:	2503      	moveq	r5, #3
 8000a80:	2504      	movne	r5, #4
 8000a82:	fa05 f50b 	lsl.w	r5, r5, fp
 8000a86:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000a8a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a8e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a90:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000a94:	bf14      	ite	ne
 8000a96:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a98:	43a5      	biceq	r5, r4
 8000a9a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a9c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a9e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000aa2:	bf14      	ite	ne
 8000aa4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aa6:	43a5      	biceq	r5, r4
 8000aa8:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aaa:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aac:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ab0:	bf14      	ite	ne
 8000ab2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ab4:	43a5      	biceq	r5, r4
 8000ab6:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ab8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aba:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000abe:	bf14      	ite	ne
 8000ac0:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ac2:	ea25 0404 	biceq.w	r4, r5, r4
 8000ac6:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000ac8:	3601      	adds	r6, #1
 8000aca:	2e10      	cmp	r6, #16
 8000acc:	f47f af73 	bne.w	80009b6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000ad0:	b003      	add	sp, #12
 8000ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000ad6:	2d03      	cmp	r5, #3
 8000ad8:	d022      	beq.n	8000b20 <HAL_GPIO_Init+0x17c>
 8000ada:	2d11      	cmp	r5, #17
 8000adc:	d184      	bne.n	80009e8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ade:	68ca      	ldr	r2, [r1, #12]
 8000ae0:	3204      	adds	r2, #4
          break;
 8000ae2:	e781      	b.n	80009e8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000ae4:	4f1a      	ldr	r7, [pc, #104]	; (8000b50 <HAL_GPIO_Init+0x1ac>)
 8000ae6:	42bd      	cmp	r5, r7
 8000ae8:	d009      	beq.n	8000afe <HAL_GPIO_Init+0x15a>
 8000aea:	d812      	bhi.n	8000b12 <HAL_GPIO_Init+0x16e>
 8000aec:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000b5c <HAL_GPIO_Init+0x1b8>
 8000af0:	454d      	cmp	r5, r9
 8000af2:	d004      	beq.n	8000afe <HAL_GPIO_Init+0x15a>
 8000af4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000af8:	454d      	cmp	r5, r9
 8000afa:	f47f af75 	bne.w	80009e8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000afe:	688a      	ldr	r2, [r1, #8]
 8000b00:	b1c2      	cbz	r2, 8000b34 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b02:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000b04:	bf0c      	ite	eq
 8000b06:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000b0a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b0e:	2208      	movs	r2, #8
 8000b10:	e76a      	b.n	80009e8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000b12:	4575      	cmp	r5, lr
 8000b14:	d0f3      	beq.n	8000afe <HAL_GPIO_Init+0x15a>
 8000b16:	4565      	cmp	r5, ip
 8000b18:	d0f1      	beq.n	8000afe <HAL_GPIO_Init+0x15a>
 8000b1a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000b60 <HAL_GPIO_Init+0x1bc>
 8000b1e:	e7eb      	b.n	8000af8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b20:	2200      	movs	r2, #0
 8000b22:	e761      	b.n	80009e8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b24:	68ca      	ldr	r2, [r1, #12]
          break;
 8000b26:	e75f      	b.n	80009e8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b28:	68ca      	ldr	r2, [r1, #12]
 8000b2a:	3208      	adds	r2, #8
          break;
 8000b2c:	e75c      	b.n	80009e8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b2e:	68ca      	ldr	r2, [r1, #12]
 8000b30:	320c      	adds	r2, #12
          break;
 8000b32:	e759      	b.n	80009e8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b34:	2204      	movs	r2, #4
 8000b36:	e757      	b.n	80009e8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b38:	2500      	movs	r5, #0
 8000b3a:	e7a2      	b.n	8000a82 <HAL_GPIO_Init+0xde>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	e7a0      	b.n	8000a82 <HAL_GPIO_Init+0xde>
 8000b40:	2502      	movs	r5, #2
 8000b42:	e79e      	b.n	8000a82 <HAL_GPIO_Init+0xde>
 8000b44:	40010400 	.word	0x40010400
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010800 	.word	0x40010800
 8000b50:	10210000 	.word	0x10210000
 8000b54:	10310000 	.word	0x10310000
 8000b58:	10320000 	.word	0x10320000
 8000b5c:	10110000 	.word	0x10110000
 8000b60:	10220000 	.word	0x10220000

08000b64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b64:	b10a      	cbz	r2, 8000b6a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b66:	6101      	str	r1, [r0, #16]
 8000b68:	4770      	bx	lr
 8000b6a:	0409      	lsls	r1, r1, #16
 8000b6c:	e7fb      	b.n	8000b66 <HAL_GPIO_WritePin+0x2>

08000b6e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b6e:	4770      	bx	lr

08000b70 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000b70:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000b74:	6959      	ldr	r1, [r3, #20]
 8000b76:	4201      	tst	r1, r0
 8000b78:	d002      	beq.n	8000b80 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b7a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b7c:	f7ff fff7 	bl	8000b6e <HAL_GPIO_EXTI_Callback>
 8000b80:	bd08      	pop	{r3, pc}
 8000b82:	bf00      	nop
 8000b84:	40010400 	.word	0x40010400

08000b88 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b88:	6803      	ldr	r3, [r0, #0]
{
 8000b8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b8e:	07db      	lsls	r3, r3, #31
{
 8000b90:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b92:	d410      	bmi.n	8000bb6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b94:	682b      	ldr	r3, [r5, #0]
 8000b96:	079f      	lsls	r7, r3, #30
 8000b98:	d45e      	bmi.n	8000c58 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b9a:	682b      	ldr	r3, [r5, #0]
 8000b9c:	0719      	lsls	r1, r3, #28
 8000b9e:	f100 8095 	bmi.w	8000ccc <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ba2:	682b      	ldr	r3, [r5, #0]
 8000ba4:	075a      	lsls	r2, r3, #29
 8000ba6:	f100 80bf 	bmi.w	8000d28 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000baa:	69ea      	ldr	r2, [r5, #28]
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	f040 812d 	bne.w	8000e0c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	e014      	b.n	8000be0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bb6:	4c90      	ldr	r4, [pc, #576]	; (8000df8 <HAL_RCC_OscConfig+0x270>)
 8000bb8:	6863      	ldr	r3, [r4, #4]
 8000bba:	f003 030c 	and.w	r3, r3, #12
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	d007      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bc2:	6863      	ldr	r3, [r4, #4]
 8000bc4:	f003 030c 	and.w	r3, r3, #12
 8000bc8:	2b08      	cmp	r3, #8
 8000bca:	d10c      	bne.n	8000be6 <HAL_RCC_OscConfig+0x5e>
 8000bcc:	6863      	ldr	r3, [r4, #4]
 8000bce:	03de      	lsls	r6, r3, #15
 8000bd0:	d509      	bpl.n	8000be6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd2:	6823      	ldr	r3, [r4, #0]
 8000bd4:	039c      	lsls	r4, r3, #14
 8000bd6:	d5dd      	bpl.n	8000b94 <HAL_RCC_OscConfig+0xc>
 8000bd8:	686b      	ldr	r3, [r5, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1da      	bne.n	8000b94 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000bde:	2001      	movs	r0, #1
}
 8000be0:	b002      	add	sp, #8
 8000be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be6:	686b      	ldr	r3, [r5, #4]
 8000be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bec:	d110      	bne.n	8000c10 <HAL_RCC_OscConfig+0x88>
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bf6:	f7ff fca3 	bl	8000540 <HAL_GetTick>
 8000bfa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bfc:	6823      	ldr	r3, [r4, #0]
 8000bfe:	0398      	lsls	r0, r3, #14
 8000c00:	d4c8      	bmi.n	8000b94 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c02:	f7ff fc9d 	bl	8000540 <HAL_GetTick>
 8000c06:	1b80      	subs	r0, r0, r6
 8000c08:	2864      	cmp	r0, #100	; 0x64
 8000c0a:	d9f7      	bls.n	8000bfc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	e7e7      	b.n	8000be0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c10:	b99b      	cbnz	r3, 8000c3a <HAL_RCC_OscConfig+0xb2>
 8000c12:	6823      	ldr	r3, [r4, #0]
 8000c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c18:	6023      	str	r3, [r4, #0]
 8000c1a:	6823      	ldr	r3, [r4, #0]
 8000c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c20:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c22:	f7ff fc8d 	bl	8000540 <HAL_GetTick>
 8000c26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c28:	6823      	ldr	r3, [r4, #0]
 8000c2a:	0399      	lsls	r1, r3, #14
 8000c2c:	d5b2      	bpl.n	8000b94 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c2e:	f7ff fc87 	bl	8000540 <HAL_GetTick>
 8000c32:	1b80      	subs	r0, r0, r6
 8000c34:	2864      	cmp	r0, #100	; 0x64
 8000c36:	d9f7      	bls.n	8000c28 <HAL_RCC_OscConfig+0xa0>
 8000c38:	e7e8      	b.n	8000c0c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c3e:	6823      	ldr	r3, [r4, #0]
 8000c40:	d103      	bne.n	8000c4a <HAL_RCC_OscConfig+0xc2>
 8000c42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c46:	6023      	str	r3, [r4, #0]
 8000c48:	e7d1      	b.n	8000bee <HAL_RCC_OscConfig+0x66>
 8000c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c4e:	6023      	str	r3, [r4, #0]
 8000c50:	6823      	ldr	r3, [r4, #0]
 8000c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c56:	e7cd      	b.n	8000bf4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c58:	4c67      	ldr	r4, [pc, #412]	; (8000df8 <HAL_RCC_OscConfig+0x270>)
 8000c5a:	6863      	ldr	r3, [r4, #4]
 8000c5c:	f013 0f0c 	tst.w	r3, #12
 8000c60:	d007      	beq.n	8000c72 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c62:	6863      	ldr	r3, [r4, #4]
 8000c64:	f003 030c 	and.w	r3, r3, #12
 8000c68:	2b08      	cmp	r3, #8
 8000c6a:	d110      	bne.n	8000c8e <HAL_RCC_OscConfig+0x106>
 8000c6c:	6863      	ldr	r3, [r4, #4]
 8000c6e:	03da      	lsls	r2, r3, #15
 8000c70:	d40d      	bmi.n	8000c8e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	079b      	lsls	r3, r3, #30
 8000c76:	d502      	bpl.n	8000c7e <HAL_RCC_OscConfig+0xf6>
 8000c78:	692b      	ldr	r3, [r5, #16]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d1af      	bne.n	8000bde <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c7e:	6823      	ldr	r3, [r4, #0]
 8000c80:	696a      	ldr	r2, [r5, #20]
 8000c82:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c86:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c8a:	6023      	str	r3, [r4, #0]
 8000c8c:	e785      	b.n	8000b9a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c8e:	692a      	ldr	r2, [r5, #16]
 8000c90:	4b5a      	ldr	r3, [pc, #360]	; (8000dfc <HAL_RCC_OscConfig+0x274>)
 8000c92:	b16a      	cbz	r2, 8000cb0 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000c94:	2201      	movs	r2, #1
 8000c96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c98:	f7ff fc52 	bl	8000540 <HAL_GetTick>
 8000c9c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	079f      	lsls	r7, r3, #30
 8000ca2:	d4ec      	bmi.n	8000c7e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ca4:	f7ff fc4c 	bl	8000540 <HAL_GetTick>
 8000ca8:	1b80      	subs	r0, r0, r6
 8000caa:	2802      	cmp	r0, #2
 8000cac:	d9f7      	bls.n	8000c9e <HAL_RCC_OscConfig+0x116>
 8000cae:	e7ad      	b.n	8000c0c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000cb0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cb2:	f7ff fc45 	bl	8000540 <HAL_GetTick>
 8000cb6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cb8:	6823      	ldr	r3, [r4, #0]
 8000cba:	0798      	lsls	r0, r3, #30
 8000cbc:	f57f af6d 	bpl.w	8000b9a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc0:	f7ff fc3e 	bl	8000540 <HAL_GetTick>
 8000cc4:	1b80      	subs	r0, r0, r6
 8000cc6:	2802      	cmp	r0, #2
 8000cc8:	d9f6      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x130>
 8000cca:	e79f      	b.n	8000c0c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ccc:	69aa      	ldr	r2, [r5, #24]
 8000cce:	4c4a      	ldr	r4, [pc, #296]	; (8000df8 <HAL_RCC_OscConfig+0x270>)
 8000cd0:	4b4b      	ldr	r3, [pc, #300]	; (8000e00 <HAL_RCC_OscConfig+0x278>)
 8000cd2:	b1da      	cbz	r2, 8000d0c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cd8:	f7ff fc32 	bl	8000540 <HAL_GetTick>
 8000cdc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ce0:	079b      	lsls	r3, r3, #30
 8000ce2:	d50d      	bpl.n	8000d00 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ce4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ce8:	4b46      	ldr	r3, [pc, #280]	; (8000e04 <HAL_RCC_OscConfig+0x27c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cf0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000cf2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000cf4:	9b01      	ldr	r3, [sp, #4]
 8000cf6:	1e5a      	subs	r2, r3, #1
 8000cf8:	9201      	str	r2, [sp, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f9      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x16a>
 8000cfe:	e750      	b.n	8000ba2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d00:	f7ff fc1e 	bl	8000540 <HAL_GetTick>
 8000d04:	1b80      	subs	r0, r0, r6
 8000d06:	2802      	cmp	r0, #2
 8000d08:	d9e9      	bls.n	8000cde <HAL_RCC_OscConfig+0x156>
 8000d0a:	e77f      	b.n	8000c0c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000d0c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d0e:	f7ff fc17 	bl	8000540 <HAL_GetTick>
 8000d12:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d16:	079f      	lsls	r7, r3, #30
 8000d18:	f57f af43 	bpl.w	8000ba2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d1c:	f7ff fc10 	bl	8000540 <HAL_GetTick>
 8000d20:	1b80      	subs	r0, r0, r6
 8000d22:	2802      	cmp	r0, #2
 8000d24:	d9f6      	bls.n	8000d14 <HAL_RCC_OscConfig+0x18c>
 8000d26:	e771      	b.n	8000c0c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d28:	4c33      	ldr	r4, [pc, #204]	; (8000df8 <HAL_RCC_OscConfig+0x270>)
 8000d2a:	69e3      	ldr	r3, [r4, #28]
 8000d2c:	00d8      	lsls	r0, r3, #3
 8000d2e:	d424      	bmi.n	8000d7a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000d30:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	69e3      	ldr	r3, [r4, #28]
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	61e3      	str	r3, [r4, #28]
 8000d3a:	69e3      	ldr	r3, [r4, #28]
 8000d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d44:	4e30      	ldr	r6, [pc, #192]	; (8000e08 <HAL_RCC_OscConfig+0x280>)
 8000d46:	6833      	ldr	r3, [r6, #0]
 8000d48:	05d9      	lsls	r1, r3, #23
 8000d4a:	d518      	bpl.n	8000d7e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d4c:	68eb      	ldr	r3, [r5, #12]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d126      	bne.n	8000da0 <HAL_RCC_OscConfig+0x218>
 8000d52:	6a23      	ldr	r3, [r4, #32]
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000d5a:	f7ff fbf1 	bl	8000540 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d5e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d62:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d64:	6a23      	ldr	r3, [r4, #32]
 8000d66:	079b      	lsls	r3, r3, #30
 8000d68:	d53f      	bpl.n	8000dea <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	f43f af1d 	beq.w	8000baa <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d70:	69e3      	ldr	r3, [r4, #28]
 8000d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d76:	61e3      	str	r3, [r4, #28]
 8000d78:	e717      	b.n	8000baa <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000d7a:	2700      	movs	r7, #0
 8000d7c:	e7e2      	b.n	8000d44 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d7e:	6833      	ldr	r3, [r6, #0]
 8000d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d84:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000d86:	f7ff fbdb 	bl	8000540 <HAL_GetTick>
 8000d8a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d8c:	6833      	ldr	r3, [r6, #0]
 8000d8e:	05da      	lsls	r2, r3, #23
 8000d90:	d4dc      	bmi.n	8000d4c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d92:	f7ff fbd5 	bl	8000540 <HAL_GetTick>
 8000d96:	eba0 0008 	sub.w	r0, r0, r8
 8000d9a:	2864      	cmp	r0, #100	; 0x64
 8000d9c:	d9f6      	bls.n	8000d8c <HAL_RCC_OscConfig+0x204>
 8000d9e:	e735      	b.n	8000c0c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000da0:	b9ab      	cbnz	r3, 8000dce <HAL_RCC_OscConfig+0x246>
 8000da2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000da4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000da8:	f023 0301 	bic.w	r3, r3, #1
 8000dac:	6223      	str	r3, [r4, #32]
 8000dae:	6a23      	ldr	r3, [r4, #32]
 8000db0:	f023 0304 	bic.w	r3, r3, #4
 8000db4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000db6:	f7ff fbc3 	bl	8000540 <HAL_GetTick>
 8000dba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dbc:	6a23      	ldr	r3, [r4, #32]
 8000dbe:	0798      	lsls	r0, r3, #30
 8000dc0:	d5d3      	bpl.n	8000d6a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dc2:	f7ff fbbd 	bl	8000540 <HAL_GetTick>
 8000dc6:	1b80      	subs	r0, r0, r6
 8000dc8:	4540      	cmp	r0, r8
 8000dca:	d9f7      	bls.n	8000dbc <HAL_RCC_OscConfig+0x234>
 8000dcc:	e71e      	b.n	8000c0c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dce:	2b05      	cmp	r3, #5
 8000dd0:	6a23      	ldr	r3, [r4, #32]
 8000dd2:	d103      	bne.n	8000ddc <HAL_RCC_OscConfig+0x254>
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	6223      	str	r3, [r4, #32]
 8000dda:	e7ba      	b.n	8000d52 <HAL_RCC_OscConfig+0x1ca>
 8000ddc:	f023 0301 	bic.w	r3, r3, #1
 8000de0:	6223      	str	r3, [r4, #32]
 8000de2:	6a23      	ldr	r3, [r4, #32]
 8000de4:	f023 0304 	bic.w	r3, r3, #4
 8000de8:	e7b6      	b.n	8000d58 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dea:	f7ff fba9 	bl	8000540 <HAL_GetTick>
 8000dee:	eba0 0008 	sub.w	r0, r0, r8
 8000df2:	42b0      	cmp	r0, r6
 8000df4:	d9b6      	bls.n	8000d64 <HAL_RCC_OscConfig+0x1dc>
 8000df6:	e709      	b.n	8000c0c <HAL_RCC_OscConfig+0x84>
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	42420000 	.word	0x42420000
 8000e00:	42420480 	.word	0x42420480
 8000e04:	20000024 	.word	0x20000024
 8000e08:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e0c:	4c22      	ldr	r4, [pc, #136]	; (8000e98 <HAL_RCC_OscConfig+0x310>)
 8000e0e:	6863      	ldr	r3, [r4, #4]
 8000e10:	f003 030c 	and.w	r3, r3, #12
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	f43f aee2 	beq.w	8000bde <HAL_RCC_OscConfig+0x56>
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	4e1f      	ldr	r6, [pc, #124]	; (8000e9c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e1e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000e20:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e22:	d12b      	bne.n	8000e7c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000e24:	f7ff fb8c 	bl	8000540 <HAL_GetTick>
 8000e28:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e2a:	6823      	ldr	r3, [r4, #0]
 8000e2c:	0199      	lsls	r1, r3, #6
 8000e2e:	d41f      	bmi.n	8000e70 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e30:	6a2b      	ldr	r3, [r5, #32]
 8000e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e36:	d105      	bne.n	8000e44 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e38:	6862      	ldr	r2, [r4, #4]
 8000e3a:	68a9      	ldr	r1, [r5, #8]
 8000e3c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000e40:	430a      	orrs	r2, r1
 8000e42:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e44:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000e46:	6862      	ldr	r2, [r4, #4]
 8000e48:	430b      	orrs	r3, r1
 8000e4a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e52:	2301      	movs	r3, #1
 8000e54:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000e56:	f7ff fb73 	bl	8000540 <HAL_GetTick>
 8000e5a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	019a      	lsls	r2, r3, #6
 8000e60:	f53f aea7 	bmi.w	8000bb2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e64:	f7ff fb6c 	bl	8000540 <HAL_GetTick>
 8000e68:	1b40      	subs	r0, r0, r5
 8000e6a:	2802      	cmp	r0, #2
 8000e6c:	d9f6      	bls.n	8000e5c <HAL_RCC_OscConfig+0x2d4>
 8000e6e:	e6cd      	b.n	8000c0c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e70:	f7ff fb66 	bl	8000540 <HAL_GetTick>
 8000e74:	1bc0      	subs	r0, r0, r7
 8000e76:	2802      	cmp	r0, #2
 8000e78:	d9d7      	bls.n	8000e2a <HAL_RCC_OscConfig+0x2a2>
 8000e7a:	e6c7      	b.n	8000c0c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fb60 	bl	8000540 <HAL_GetTick>
 8000e80:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e82:	6823      	ldr	r3, [r4, #0]
 8000e84:	019b      	lsls	r3, r3, #6
 8000e86:	f57f ae94 	bpl.w	8000bb2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e8a:	f7ff fb59 	bl	8000540 <HAL_GetTick>
 8000e8e:	1b40      	subs	r0, r0, r5
 8000e90:	2802      	cmp	r0, #2
 8000e92:	d9f6      	bls.n	8000e82 <HAL_RCC_OscConfig+0x2fa>
 8000e94:	e6ba      	b.n	8000c0c <HAL_RCC_OscConfig+0x84>
 8000e96:	bf00      	nop
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	42420060 	.word	0x42420060

08000ea0 <HAL_RCC_GetSysClockFreq>:
{
 8000ea0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000ea4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ea6:	ac02      	add	r4, sp, #8
 8000ea8:	f103 0510 	add.w	r5, r3, #16
 8000eac:	4622      	mov	r2, r4
 8000eae:	6818      	ldr	r0, [r3, #0]
 8000eb0:	6859      	ldr	r1, [r3, #4]
 8000eb2:	3308      	adds	r3, #8
 8000eb4:	c203      	stmia	r2!, {r0, r1}
 8000eb6:	42ab      	cmp	r3, r5
 8000eb8:	4614      	mov	r4, r2
 8000eba:	d1f7      	bne.n	8000eac <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	f88d 3004 	strb.w	r3, [sp, #4]
 8000ec2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000ec4:	4911      	ldr	r1, [pc, #68]	; (8000f0c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ec6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000eca:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000ecc:	f003 020c 	and.w	r2, r3, #12
 8000ed0:	2a08      	cmp	r2, #8
 8000ed2:	d117      	bne.n	8000f04 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ed4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000ed8:	a806      	add	r0, sp, #24
 8000eda:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000edc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ede:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ee2:	d50c      	bpl.n	8000efe <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ee4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ee6:	480a      	ldr	r0, [pc, #40]	; (8000f10 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ee8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000eec:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000eee:	aa06      	add	r2, sp, #24
 8000ef0:	4413      	add	r3, r2
 8000ef2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ef6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000efa:	b007      	add	sp, #28
 8000efc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <HAL_RCC_GetSysClockFreq+0x74>)
 8000f00:	4350      	muls	r0, r2
 8000f02:	e7fa      	b.n	8000efa <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000f06:	e7f8      	b.n	8000efa <HAL_RCC_GetSysClockFreq+0x5a>
 8000f08:	08002200 	.word	0x08002200
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	007a1200 	.word	0x007a1200
 8000f14:	003d0900 	.word	0x003d0900

08000f18 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f18:	4a54      	ldr	r2, [pc, #336]	; (800106c <HAL_RCC_ClockConfig+0x154>)
{
 8000f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f1e:	6813      	ldr	r3, [r2, #0]
{
 8000f20:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	428b      	cmp	r3, r1
{
 8000f28:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f2a:	d32a      	bcc.n	8000f82 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f2c:	6829      	ldr	r1, [r5, #0]
 8000f2e:	078c      	lsls	r4, r1, #30
 8000f30:	d434      	bmi.n	8000f9c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f32:	07ca      	lsls	r2, r1, #31
 8000f34:	d447      	bmi.n	8000fc6 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f36:	4a4d      	ldr	r2, [pc, #308]	; (800106c <HAL_RCC_ClockConfig+0x154>)
 8000f38:	6813      	ldr	r3, [r2, #0]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	f0c0 8082 	bcc.w	8001048 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f44:	682a      	ldr	r2, [r5, #0]
 8000f46:	4c4a      	ldr	r4, [pc, #296]	; (8001070 <HAL_RCC_ClockConfig+0x158>)
 8000f48:	f012 0f04 	tst.w	r2, #4
 8000f4c:	f040 8087 	bne.w	800105e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f50:	0713      	lsls	r3, r2, #28
 8000f52:	d506      	bpl.n	8000f62 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f54:	6863      	ldr	r3, [r4, #4]
 8000f56:	692a      	ldr	r2, [r5, #16]
 8000f58:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f5c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f60:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f62:	f7ff ff9d 	bl	8000ea0 <HAL_RCC_GetSysClockFreq>
 8000f66:	6863      	ldr	r3, [r4, #4]
 8000f68:	4a42      	ldr	r2, [pc, #264]	; (8001074 <HAL_RCC_ClockConfig+0x15c>)
 8000f6a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f6e:	5cd3      	ldrb	r3, [r2, r3]
 8000f70:	40d8      	lsrs	r0, r3
 8000f72:	4b41      	ldr	r3, [pc, #260]	; (8001078 <HAL_RCC_ClockConfig+0x160>)
 8000f74:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff faa0 	bl	80004bc <HAL_InitTick>
  return HAL_OK;
 8000f7c:	2000      	movs	r0, #0
}
 8000f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f82:	6813      	ldr	r3, [r2, #0]
 8000f84:	f023 0307 	bic.w	r3, r3, #7
 8000f88:	430b      	orrs	r3, r1
 8000f8a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f8c:	6813      	ldr	r3, [r2, #0]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	4299      	cmp	r1, r3
 8000f94:	d0ca      	beq.n	8000f2c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000f96:	2001      	movs	r0, #1
 8000f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f9c:	4b34      	ldr	r3, [pc, #208]	; (8001070 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f9e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fa2:	bf1e      	ittt	ne
 8000fa4:	685a      	ldrne	r2, [r3, #4]
 8000fa6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000faa:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fac:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fae:	bf42      	ittt	mi
 8000fb0:	685a      	ldrmi	r2, [r3, #4]
 8000fb2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000fb6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	68a8      	ldr	r0, [r5, #8]
 8000fbc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000fc0:	4302      	orrs	r2, r0
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	e7b5      	b.n	8000f32 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fc6:	686a      	ldr	r2, [r5, #4]
 8000fc8:	4c29      	ldr	r4, [pc, #164]	; (8001070 <HAL_RCC_ClockConfig+0x158>)
 8000fca:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fcc:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fce:	d11c      	bne.n	800100a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd4:	d0df      	beq.n	8000f96 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fd6:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fd8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fdc:	f023 0303 	bic.w	r3, r3, #3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000fe4:	f7ff faac 	bl	8000540 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fe8:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000fea:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d114      	bne.n	800101a <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ff0:	6863      	ldr	r3, [r4, #4]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d09d      	beq.n	8000f36 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ffa:	f7ff faa1 	bl	8000540 <HAL_GetTick>
 8000ffe:	1bc0      	subs	r0, r0, r7
 8001000:	4540      	cmp	r0, r8
 8001002:	d9f5      	bls.n	8000ff0 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001004:	2003      	movs	r0, #3
 8001006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800100a:	2a02      	cmp	r2, #2
 800100c:	d102      	bne.n	8001014 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800100e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001012:	e7df      	b.n	8000fd4 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001014:	f013 0f02 	tst.w	r3, #2
 8001018:	e7dc      	b.n	8000fd4 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800101a:	2b02      	cmp	r3, #2
 800101c:	d10f      	bne.n	800103e <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800101e:	6863      	ldr	r3, [r4, #4]
 8001020:	f003 030c 	and.w	r3, r3, #12
 8001024:	2b08      	cmp	r3, #8
 8001026:	d086      	beq.n	8000f36 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001028:	f7ff fa8a 	bl	8000540 <HAL_GetTick>
 800102c:	1bc0      	subs	r0, r0, r7
 800102e:	4540      	cmp	r0, r8
 8001030:	d9f5      	bls.n	800101e <HAL_RCC_ClockConfig+0x106>
 8001032:	e7e7      	b.n	8001004 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001034:	f7ff fa84 	bl	8000540 <HAL_GetTick>
 8001038:	1bc0      	subs	r0, r0, r7
 800103a:	4540      	cmp	r0, r8
 800103c:	d8e2      	bhi.n	8001004 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800103e:	6863      	ldr	r3, [r4, #4]
 8001040:	f013 0f0c 	tst.w	r3, #12
 8001044:	d1f6      	bne.n	8001034 <HAL_RCC_ClockConfig+0x11c>
 8001046:	e776      	b.n	8000f36 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001048:	6813      	ldr	r3, [r2, #0]
 800104a:	f023 0307 	bic.w	r3, r3, #7
 800104e:	4333      	orrs	r3, r6
 8001050:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001052:	6813      	ldr	r3, [r2, #0]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	429e      	cmp	r6, r3
 800105a:	d19c      	bne.n	8000f96 <HAL_RCC_ClockConfig+0x7e>
 800105c:	e772      	b.n	8000f44 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800105e:	6863      	ldr	r3, [r4, #4]
 8001060:	68e9      	ldr	r1, [r5, #12]
 8001062:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001066:	430b      	orrs	r3, r1
 8001068:	6063      	str	r3, [r4, #4]
 800106a:	e771      	b.n	8000f50 <HAL_RCC_ClockConfig+0x38>
 800106c:	40022000 	.word	0x40022000
 8001070:	40021000 	.word	0x40021000
 8001074:	08002210 	.word	0x08002210
 8001078:	20000024 	.word	0x20000024

0800107c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <HAL_RCC_GetPCLK1Freq+0x14>)
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001086:	5cd3      	ldrb	r3, [r2, r3]
 8001088:	4a03      	ldr	r2, [pc, #12]	; (8001098 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800108a:	6810      	ldr	r0, [r2, #0]
}    
 800108c:	40d8      	lsrs	r0, r3
 800108e:	4770      	bx	lr
 8001090:	40021000 	.word	0x40021000
 8001094:	08002220 	.word	0x08002220
 8001098:	20000024 	.word	0x20000024

0800109c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80010a6:	5cd3      	ldrb	r3, [r2, r3]
 80010a8:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80010aa:	6810      	ldr	r0, [r2, #0]
} 
 80010ac:	40d8      	lsrs	r0, r3
 80010ae:	4770      	bx	lr
 80010b0:	40021000 	.word	0x40021000
 80010b4:	08002220 	.word	0x08002220
 80010b8:	20000024 	.word	0x20000024

080010bc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80010bc:	6803      	ldr	r3, [r0, #0]
{
 80010be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80010c2:	07d9      	lsls	r1, r3, #31
{
 80010c4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80010c6:	d520      	bpl.n	800110a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010c8:	4c35      	ldr	r4, [pc, #212]	; (80011a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80010ca:	69e3      	ldr	r3, [r4, #28]
 80010cc:	00da      	lsls	r2, r3, #3
 80010ce:	d432      	bmi.n	8001136 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80010d0:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	69e3      	ldr	r3, [r4, #28]
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	61e3      	str	r3, [r4, #28]
 80010da:	69e3      	ldr	r3, [r4, #28]
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e4:	4e2f      	ldr	r6, [pc, #188]	; (80011a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80010e6:	6833      	ldr	r3, [r6, #0]
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	d526      	bpl.n	800113a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80010ec:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010ee:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80010f2:	d136      	bne.n	8001162 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80010f4:	6a23      	ldr	r3, [r4, #32]
 80010f6:	686a      	ldr	r2, [r5, #4]
 80010f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010fc:	4313      	orrs	r3, r2
 80010fe:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001100:	b11f      	cbz	r7, 800110a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001102:	69e3      	ldr	r3, [r4, #28]
 8001104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001108:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800110a:	6828      	ldr	r0, [r5, #0]
 800110c:	0783      	lsls	r3, r0, #30
 800110e:	d506      	bpl.n	800111e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001110:	4a23      	ldr	r2, [pc, #140]	; (80011a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001112:	68a9      	ldr	r1, [r5, #8]
 8001114:	6853      	ldr	r3, [r2, #4]
 8001116:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800111a:	430b      	orrs	r3, r1
 800111c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800111e:	f010 0010 	ands.w	r0, r0, #16
 8001122:	d01b      	beq.n	800115c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001124:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001126:	68e9      	ldr	r1, [r5, #12]
 8001128:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800112a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800112c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001130:	430b      	orrs	r3, r1
 8001132:	6053      	str	r3, [r2, #4]
 8001134:	e012      	b.n	800115c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001136:	2700      	movs	r7, #0
 8001138:	e7d4      	b.n	80010e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800113a:	6833      	ldr	r3, [r6, #0]
 800113c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001140:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001142:	f7ff f9fd 	bl	8000540 <HAL_GetTick>
 8001146:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001148:	6833      	ldr	r3, [r6, #0]
 800114a:	05d8      	lsls	r0, r3, #23
 800114c:	d4ce      	bmi.n	80010ec <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800114e:	f7ff f9f7 	bl	8000540 <HAL_GetTick>
 8001152:	eba0 0008 	sub.w	r0, r0, r8
 8001156:	2864      	cmp	r0, #100	; 0x64
 8001158:	d9f6      	bls.n	8001148 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800115a:	2003      	movs	r0, #3
}
 800115c:	b002      	add	sp, #8
 800115e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001162:	686a      	ldr	r2, [r5, #4]
 8001164:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001168:	4293      	cmp	r3, r2
 800116a:	d0c3      	beq.n	80010f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800116c:	2001      	movs	r0, #1
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001170:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001172:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001174:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001176:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800117a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800117c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800117e:	07d9      	lsls	r1, r3, #31
 8001180:	d5b8      	bpl.n	80010f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001182:	f7ff f9dd 	bl	8000540 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001186:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800118a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800118c:	6a23      	ldr	r3, [r4, #32]
 800118e:	079a      	lsls	r2, r3, #30
 8001190:	d4b0      	bmi.n	80010f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001192:	f7ff f9d5 	bl	8000540 <HAL_GetTick>
 8001196:	1b80      	subs	r0, r0, r6
 8001198:	4540      	cmp	r0, r8
 800119a:	d9f7      	bls.n	800118c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800119c:	e7dd      	b.n	800115a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40007000 	.word	0x40007000
 80011a8:	42420440 	.word	0x42420440

080011ac <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011ac:	6a03      	ldr	r3, [r0, #32]
{
 80011ae:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011b0:	f023 0301 	bic.w	r3, r3, #1
 80011b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80011b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80011b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80011ba:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80011bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80011be:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80011c2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80011c4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80011c6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80011ca:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80011cc:	4d0a      	ldr	r5, [pc, #40]	; (80011f8 <TIM_OC1_SetConfig+0x4c>)
 80011ce:	42a8      	cmp	r0, r5
 80011d0:	d10b      	bne.n	80011ea <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80011d2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80011d4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80011d8:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80011da:	698e      	ldr	r6, [r1, #24]
 80011dc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80011de:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80011e2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80011e4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80011e8:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011ea:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80011ec:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80011ee:	684a      	ldr	r2, [r1, #4]
 80011f0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011f2:	6203      	str	r3, [r0, #32]
 80011f4:	bd70      	pop	{r4, r5, r6, pc}
 80011f6:	bf00      	nop
 80011f8:	40012c00 	.word	0x40012c00

080011fc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80011fc:	6a03      	ldr	r3, [r0, #32]
{
 80011fe:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001204:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001206:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001208:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800120a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800120c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800120e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001212:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001214:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001216:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800121a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800121e:	4d0b      	ldr	r5, [pc, #44]	; (800124c <TIM_OC3_SetConfig+0x50>)
 8001220:	42a8      	cmp	r0, r5
 8001222:	d10d      	bne.n	8001240 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001224:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800122a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800122e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001230:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001232:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001236:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001238:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800123c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001240:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001242:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001244:	684a      	ldr	r2, [r1, #4]
 8001246:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001248:	6203      	str	r3, [r0, #32]
 800124a:	bd70      	pop	{r4, r5, r6, pc}
 800124c:	40012c00 	.word	0x40012c00

08001250 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001250:	6a03      	ldr	r3, [r0, #32]
{
 8001252:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001258:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800125a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800125c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800125e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001260:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001262:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001266:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800126a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800126c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001270:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001274:	4d06      	ldr	r5, [pc, #24]	; (8001290 <TIM_OC4_SetConfig+0x40>)
 8001276:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001278:	bf02      	ittt	eq
 800127a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800127c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001280:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001284:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001286:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001288:	684a      	ldr	r2, [r1, #4]
 800128a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800128c:	6203      	str	r3, [r0, #32]
 800128e:	bd30      	pop	{r4, r5, pc}
 8001290:	40012c00 	.word	0x40012c00

08001294 <HAL_TIM_PWM_MspInit>:
 8001294:	4770      	bx	lr

08001296 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001296:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800129a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800129c:	2b01      	cmp	r3, #1
 800129e:	f04f 0302 	mov.w	r3, #2
 80012a2:	d01c      	beq.n	80012de <HAL_TIM_ConfigClockSource+0x48>
 80012a4:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80012a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80012aa:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80012ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80012b0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80012b2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80012b6:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80012ba:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80012bc:	680a      	ldr	r2, [r1, #0]
 80012be:	2a40      	cmp	r2, #64	; 0x40
 80012c0:	d079      	beq.n	80013b6 <HAL_TIM_ConfigClockSource+0x120>
 80012c2:	d819      	bhi.n	80012f8 <HAL_TIM_ConfigClockSource+0x62>
 80012c4:	2a10      	cmp	r2, #16
 80012c6:	f000 8093 	beq.w	80013f0 <HAL_TIM_ConfigClockSource+0x15a>
 80012ca:	d80a      	bhi.n	80012e2 <HAL_TIM_ConfigClockSource+0x4c>
 80012cc:	2a00      	cmp	r2, #0
 80012ce:	f000 8089 	beq.w	80013e4 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80012d2:	2301      	movs	r3, #1
 80012d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80012d8:	2300      	movs	r3, #0
 80012da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80012de:	4618      	mov	r0, r3
}
 80012e0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80012e2:	2a20      	cmp	r2, #32
 80012e4:	f000 808a 	beq.w	80013fc <HAL_TIM_ConfigClockSource+0x166>
 80012e8:	2a30      	cmp	r2, #48	; 0x30
 80012ea:	d1f2      	bne.n	80012d2 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80012ec:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80012ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80012f2:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80012f6:	e036      	b.n	8001366 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80012f8:	2a70      	cmp	r2, #112	; 0x70
 80012fa:	d036      	beq.n	800136a <HAL_TIM_ConfigClockSource+0xd4>
 80012fc:	d81b      	bhi.n	8001336 <HAL_TIM_ConfigClockSource+0xa0>
 80012fe:	2a50      	cmp	r2, #80	; 0x50
 8001300:	d042      	beq.n	8001388 <HAL_TIM_ConfigClockSource+0xf2>
 8001302:	2a60      	cmp	r2, #96	; 0x60
 8001304:	d1e5      	bne.n	80012d2 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001306:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001308:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800130a:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800130e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001310:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001312:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001314:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001316:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800131a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800131e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001322:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001326:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001328:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800132a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800132c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001330:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001334:	e017      	b.n	8001366 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001336:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800133a:	d011      	beq.n	8001360 <HAL_TIM_ConfigClockSource+0xca>
 800133c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001340:	d1c7      	bne.n	80012d2 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001342:	688a      	ldr	r2, [r1, #8]
 8001344:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001346:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001348:	68c9      	ldr	r1, [r1, #12]
 800134a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800134c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001350:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001354:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001356:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800135e:	e002      	b.n	8001366 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	e7b3      	b.n	80012d2 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800136a:	688a      	ldr	r2, [r1, #8]
 800136c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800136e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001370:	68c9      	ldr	r1, [r1, #12]
 8001372:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001374:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001378:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800137c:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800137e:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001380:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001382:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001386:	e7ee      	b.n	8001366 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001388:	684c      	ldr	r4, [r1, #4]
 800138a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800138c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800138e:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001390:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001394:	f025 0501 	bic.w	r5, r5, #1
 8001398:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800139a:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800139c:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800139e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80013a2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80013a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80013a8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80013aa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013b0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80013b4:	e7d7      	b.n	8001366 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80013b6:	684c      	ldr	r4, [r1, #4]
 80013b8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80013ba:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013bc:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80013be:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013c2:	f025 0501 	bic.w	r5, r5, #1
 80013c6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80013c8:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80013ca:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80013cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80013d0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80013d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80013d6:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80013d8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013de:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80013e2:	e7c0      	b.n	8001366 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80013e4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013ea:	f042 0207 	orr.w	r2, r2, #7
 80013ee:	e7ba      	b.n	8001366 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80013f0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013f6:	f042 0217 	orr.w	r2, r2, #23
 80013fa:	e7b4      	b.n	8001366 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80013fc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001402:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001406:	e7ae      	b.n	8001366 <HAL_TIM_ConfigClockSource+0xd0>

08001408 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001408:	4a1a      	ldr	r2, [pc, #104]	; (8001474 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800140a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800140c:	4290      	cmp	r0, r2
 800140e:	d00a      	beq.n	8001426 <TIM_Base_SetConfig+0x1e>
 8001410:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001414:	d007      	beq.n	8001426 <TIM_Base_SetConfig+0x1e>
 8001416:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800141a:	4290      	cmp	r0, r2
 800141c:	d003      	beq.n	8001426 <TIM_Base_SetConfig+0x1e>
 800141e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001422:	4290      	cmp	r0, r2
 8001424:	d115      	bne.n	8001452 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001426:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800142c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800142e:	4a11      	ldr	r2, [pc, #68]	; (8001474 <TIM_Base_SetConfig+0x6c>)
 8001430:	4290      	cmp	r0, r2
 8001432:	d00a      	beq.n	800144a <TIM_Base_SetConfig+0x42>
 8001434:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001438:	d007      	beq.n	800144a <TIM_Base_SetConfig+0x42>
 800143a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800143e:	4290      	cmp	r0, r2
 8001440:	d003      	beq.n	800144a <TIM_Base_SetConfig+0x42>
 8001442:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001446:	4290      	cmp	r0, r2
 8001448:	d103      	bne.n	8001452 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800144a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800144c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001450:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001452:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001458:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800145a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800145c:	688b      	ldr	r3, [r1, #8]
 800145e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001460:	680b      	ldr	r3, [r1, #0]
 8001462:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <TIM_Base_SetConfig+0x6c>)
 8001466:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001468:	bf04      	itt	eq
 800146a:	690b      	ldreq	r3, [r1, #16]
 800146c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800146e:	2301      	movs	r3, #1
 8001470:	6143      	str	r3, [r0, #20]
 8001472:	4770      	bx	lr
 8001474:	40012c00 	.word	0x40012c00

08001478 <HAL_TIM_Base_Init>:
{
 8001478:	b510      	push	{r4, lr}
  if(htim == NULL)
 800147a:	4604      	mov	r4, r0
 800147c:	b1a0      	cbz	r0, 80014a8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800147e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001482:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001486:	b91b      	cbnz	r3, 8001490 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001488:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800148c:	f000 fd5e 	bl	8001f4c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001490:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001492:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001494:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001498:	1d21      	adds	r1, r4, #4
 800149a:	f7ff ffb5 	bl	8001408 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800149e:	2301      	movs	r3, #1
  return HAL_OK;
 80014a0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80014a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80014a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014a8:	2001      	movs	r0, #1
}
 80014aa:	bd10      	pop	{r4, pc}

080014ac <HAL_TIM_PWM_Init>:
{
 80014ac:	b510      	push	{r4, lr}
  if(htim == NULL)
 80014ae:	4604      	mov	r4, r0
 80014b0:	b1a0      	cbz	r0, 80014dc <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80014b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80014b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014ba:	b91b      	cbnz	r3, 80014c4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80014bc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80014c0:	f7ff fee8 	bl	8001294 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80014c4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014c6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80014c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014cc:	1d21      	adds	r1, r4, #4
 80014ce:	f7ff ff9b 	bl	8001408 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80014d2:	2301      	movs	r3, #1
  return HAL_OK;
 80014d4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80014d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80014da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014dc:	2001      	movs	r0, #1
}
 80014de:	bd10      	pop	{r4, pc}

080014e0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014e0:	6a03      	ldr	r3, [r0, #32]
{
 80014e2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014e4:	f023 0310 	bic.w	r3, r3, #16
 80014e8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80014ea:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80014ec:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80014ee:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80014f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80014f2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80014f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80014fa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80014fc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001500:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001504:	4d0b      	ldr	r5, [pc, #44]	; (8001534 <TIM_OC2_SetConfig+0x54>)
 8001506:	42a8      	cmp	r0, r5
 8001508:	d10d      	bne.n	8001526 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800150a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800150c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001510:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001514:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001516:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001518:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800151c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800151e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001522:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001526:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001528:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800152a:	684a      	ldr	r2, [r1, #4]
 800152c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800152e:	6203      	str	r3, [r0, #32]
 8001530:	bd70      	pop	{r4, r5, r6, pc}
 8001532:	bf00      	nop
 8001534:	40012c00 	.word	0x40012c00

08001538 <HAL_TIM_PWM_ConfigChannel>:
{
 8001538:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800153a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800153e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001540:	2b01      	cmp	r3, #1
 8001542:	f04f 0002 	mov.w	r0, #2
 8001546:	d025      	beq.n	8001594 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001548:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800154a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800154e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8001552:	2a0c      	cmp	r2, #12
 8001554:	d818      	bhi.n	8001588 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001556:	e8df f002 	tbb	[pc, r2]
 800155a:	1707      	.short	0x1707
 800155c:	171e1717 	.word	0x171e1717
 8001560:	172f1717 	.word	0x172f1717
 8001564:	1717      	.short	0x1717
 8001566:	40          	.byte	0x40
 8001567:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001568:	6820      	ldr	r0, [r4, #0]
 800156a:	f7ff fe1f 	bl	80011ac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800156e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001570:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001572:	699a      	ldr	r2, [r3, #24]
 8001574:	f042 0208 	orr.w	r2, r2, #8
 8001578:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800157a:	699a      	ldr	r2, [r3, #24]
 800157c:	f022 0204 	bic.w	r2, r2, #4
 8001580:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001582:	699a      	ldr	r2, [r3, #24]
 8001584:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001586:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001588:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800158a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800158c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001590:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001594:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001596:	6820      	ldr	r0, [r4, #0]
 8001598:	f7ff ffa2 	bl	80014e0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800159c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800159e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80015a0:	699a      	ldr	r2, [r3, #24]
 80015a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80015a8:	699a      	ldr	r2, [r3, #24]
 80015aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80015b0:	699a      	ldr	r2, [r3, #24]
 80015b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80015b6:	e7e6      	b.n	8001586 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80015b8:	6820      	ldr	r0, [r4, #0]
 80015ba:	f7ff fe1f 	bl	80011fc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80015be:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80015c0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80015c2:	69da      	ldr	r2, [r3, #28]
 80015c4:	f042 0208 	orr.w	r2, r2, #8
 80015c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80015ca:	69da      	ldr	r2, [r3, #28]
 80015cc:	f022 0204 	bic.w	r2, r2, #4
 80015d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80015d2:	69da      	ldr	r2, [r3, #28]
 80015d4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80015d6:	61da      	str	r2, [r3, #28]
    break;
 80015d8:	e7d6      	b.n	8001588 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80015da:	6820      	ldr	r0, [r4, #0]
 80015dc:	f7ff fe38 	bl	8001250 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80015e0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80015e2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80015e4:	69da      	ldr	r2, [r3, #28]
 80015e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80015ec:	69da      	ldr	r2, [r3, #28]
 80015ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80015f4:	69da      	ldr	r2, [r3, #28]
 80015f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80015fa:	e7ec      	b.n	80015d6 <HAL_TIM_PWM_ConfigChannel+0x9e>

080015fc <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80015fc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80015fe:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001600:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8001602:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001604:	ea23 0304 	bic.w	r3, r3, r4
 8001608:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800160a:	6a03      	ldr	r3, [r0, #32]
 800160c:	408a      	lsls	r2, r1
 800160e:	431a      	orrs	r2, r3
 8001610:	6202      	str	r2, [r0, #32]
 8001612:	bd10      	pop	{r4, pc}

08001614 <HAL_TIM_PWM_Start>:
{
 8001614:	b510      	push	{r4, lr}
 8001616:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001618:	2201      	movs	r2, #1
 800161a:	6800      	ldr	r0, [r0, #0]
 800161c:	f7ff ffee 	bl	80015fc <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	4a06      	ldr	r2, [pc, #24]	; (800163c <HAL_TIM_PWM_Start+0x28>)
}
 8001624:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001626:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001628:	bf02      	ittt	eq
 800162a:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800162c:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001630:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	f042 0201 	orr.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]
}
 800163a:	bd10      	pop	{r4, pc}
 800163c:	40012c00 	.word	0x40012c00

08001640 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001640:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001644:	2b01      	cmp	r3, #1
 8001646:	d01f      	beq.n	8001688 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001648:	68cb      	ldr	r3, [r1, #12]
 800164a:	688a      	ldr	r2, [r1, #8]
 800164c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001650:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001652:	684a      	ldr	r2, [r1, #4]
 8001654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001658:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800165a:	680a      	ldr	r2, [r1, #0]
 800165c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001660:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001662:	690a      	ldr	r2, [r1, #16]
 8001664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001668:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800166a:	694a      	ldr	r2, [r1, #20]
 800166c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001670:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001672:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001674:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001678:	4313      	orrs	r3, r2

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800167a:	6802      	ldr	r2, [r0, #0]
 800167c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800167e:	2300      	movs	r3, #0
 8001680:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001684:	4618      	mov	r0, r3
 8001686:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001688:	2002      	movs	r0, #2
}
 800168a:	4770      	bx	lr

0800168c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800168c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001690:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001692:	2b01      	cmp	r3, #1
 8001694:	f04f 0302 	mov.w	r3, #2
 8001698:	d018      	beq.n	80016cc <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800169a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800169e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80016a0:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80016a2:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80016a4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80016a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016aa:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	4322      	orrs	r2, r4
 80016b0:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016b8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	430a      	orrs	r2, r1
 80016be:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80016c6:	2300      	movs	r3, #0
 80016c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80016cc:	4618      	mov	r0, r3

  return HAL_OK;
}
 80016ce:	bd10      	pop	{r4, pc}

080016d0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016d4:	6805      	ldr	r5, [r0, #0]
 80016d6:	68c2      	ldr	r2, [r0, #12]
 80016d8:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016da:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016e0:	4313      	orrs	r3, r2
 80016e2:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016e4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80016e6:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016e8:	430b      	orrs	r3, r1
 80016ea:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80016ec:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80016f0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016f4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016fa:	696b      	ldr	r3, [r5, #20]
 80016fc:	6982      	ldr	r2, [r0, #24]
 80016fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001702:	4313      	orrs	r3, r2
 8001704:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001706:	4b40      	ldr	r3, [pc, #256]	; (8001808 <UART_SetConfig+0x138>)
{
 8001708:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800170a:	429d      	cmp	r5, r3
 800170c:	f04f 0419 	mov.w	r4, #25
 8001710:	d146      	bne.n	80017a0 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001712:	f7ff fcc3 	bl	800109c <HAL_RCC_GetPCLK2Freq>
 8001716:	fb04 f300 	mul.w	r3, r4, r0
 800171a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800171e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001722:	00b6      	lsls	r6, r6, #2
 8001724:	fbb3 f3f6 	udiv	r3, r3, r6
 8001728:	fbb3 f3f8 	udiv	r3, r3, r8
 800172c:	011e      	lsls	r6, r3, #4
 800172e:	f7ff fcb5 	bl	800109c <HAL_RCC_GetPCLK2Freq>
 8001732:	4360      	muls	r0, r4
 8001734:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	fbb0 f7f3 	udiv	r7, r0, r3
 800173e:	f7ff fcad 	bl	800109c <HAL_RCC_GetPCLK2Freq>
 8001742:	4360      	muls	r0, r4
 8001744:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	fbb0 f3f3 	udiv	r3, r0, r3
 800174e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001752:	fb08 7313 	mls	r3, r8, r3, r7
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	3332      	adds	r3, #50	; 0x32
 800175a:	fbb3 f3f8 	udiv	r3, r3, r8
 800175e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001762:	f7ff fc9b 	bl	800109c <HAL_RCC_GetPCLK2Freq>
 8001766:	4360      	muls	r0, r4
 8001768:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800176c:	0092      	lsls	r2, r2, #2
 800176e:	fbb0 faf2 	udiv	sl, r0, r2
 8001772:	f7ff fc93 	bl	800109c <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001776:	4360      	muls	r0, r4
 8001778:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001782:	fbb3 f3f8 	udiv	r3, r3, r8
 8001786:	fb08 a313 	mls	r3, r8, r3, sl
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	3332      	adds	r3, #50	; 0x32
 800178e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	433b      	orrs	r3, r7
 8001798:	4433      	add	r3, r6
 800179a:	60ab      	str	r3, [r5, #8]
 800179c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017a0:	f7ff fc6c 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 80017a4:	fb04 f300 	mul.w	r3, r4, r0
 80017a8:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80017ac:	f04f 0864 	mov.w	r8, #100	; 0x64
 80017b0:	00b6      	lsls	r6, r6, #2
 80017b2:	fbb3 f3f6 	udiv	r3, r3, r6
 80017b6:	fbb3 f3f8 	udiv	r3, r3, r8
 80017ba:	011e      	lsls	r6, r3, #4
 80017bc:	f7ff fc5e 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 80017c0:	4360      	muls	r0, r4
 80017c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	fbb0 f7f3 	udiv	r7, r0, r3
 80017cc:	f7ff fc56 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 80017d0:	4360      	muls	r0, r4
 80017d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80017dc:	fbb3 f3f8 	udiv	r3, r3, r8
 80017e0:	fb08 7313 	mls	r3, r8, r3, r7
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	3332      	adds	r3, #50	; 0x32
 80017e8:	fbb3 f3f8 	udiv	r3, r3, r8
 80017ec:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80017f0:	f7ff fc44 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 80017f4:	4360      	muls	r0, r4
 80017f6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80017fa:	0092      	lsls	r2, r2, #2
 80017fc:	fbb0 faf2 	udiv	sl, r0, r2
 8001800:	f7ff fc3c 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 8001804:	e7b7      	b.n	8001776 <UART_SetConfig+0xa6>
 8001806:	bf00      	nop
 8001808:	40013800 	.word	0x40013800

0800180c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800180e:	4604      	mov	r4, r0
 8001810:	460e      	mov	r6, r1
 8001812:	4617      	mov	r7, r2
 8001814:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001816:	6821      	ldr	r1, [r4, #0]
 8001818:	680b      	ldr	r3, [r1, #0]
 800181a:	ea36 0303 	bics.w	r3, r6, r3
 800181e:	d101      	bne.n	8001824 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001820:	2000      	movs	r0, #0
}
 8001822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001824:	1c6b      	adds	r3, r5, #1
 8001826:	d0f7      	beq.n	8001818 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001828:	b995      	cbnz	r5, 8001850 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800182a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800182c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001834:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	f022 0201 	bic.w	r2, r2, #1
 800183c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800183e:	2320      	movs	r3, #32
 8001840:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001844:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001848:	2300      	movs	r3, #0
 800184a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800184e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001850:	f7fe fe76 	bl	8000540 <HAL_GetTick>
 8001854:	1bc0      	subs	r0, r0, r7
 8001856:	4285      	cmp	r5, r0
 8001858:	d2dd      	bcs.n	8001816 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800185a:	e7e6      	b.n	800182a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800185c <HAL_UART_Init>:
{
 800185c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800185e:	4604      	mov	r4, r0
 8001860:	b340      	cbz	r0, 80018b4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001862:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001866:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800186a:	b91b      	cbnz	r3, 8001874 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800186c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001870:	f000 fc04 	bl	800207c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001874:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001876:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001878:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800187c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800187e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001880:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001884:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001886:	f7ff ff23 	bl	80016d0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800188a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800188c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001894:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001896:	695a      	ldr	r2, [r3, #20]
 8001898:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800189c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018a4:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80018a6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018a8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80018aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80018ae:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80018b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80018b4:	2001      	movs	r0, #1
}
 80018b6:	bd10      	pop	{r4, pc}

080018b8 <HAL_UART_Receive>:
{
 80018b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018bc:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 80018be:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80018c2:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 80018c4:	2b20      	cmp	r3, #32
{
 80018c6:	460d      	mov	r5, r1
 80018c8:	4690      	mov	r8, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80018ca:	d151      	bne.n	8001970 <HAL_UART_Receive+0xb8>
    if((pData == NULL) || (Size == 0U))
 80018cc:	2900      	cmp	r1, #0
 80018ce:	d04c      	beq.n	800196a <HAL_UART_Receive+0xb2>
 80018d0:	2a00      	cmp	r2, #0
 80018d2:	d04a      	beq.n	800196a <HAL_UART_Receive+0xb2>
    __HAL_LOCK(huart);
 80018d4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d049      	beq.n	8001970 <HAL_UART_Receive+0xb8>
 80018dc:	2301      	movs	r3, #1
 80018de:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80018e6:	2322      	movs	r3, #34	; 0x22
 80018e8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 80018ec:	f7fe fe28 	bl	8000540 <HAL_GetTick>
 80018f0:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 80018f2:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80018f6:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 80018fa:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 80018fc:	b280      	uxth	r0, r0
 80018fe:	b930      	cbnz	r0, 800190e <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8001900:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001902:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 8001906:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 800190a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 800190e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001910:	4632      	mov	r2, r6
      huart->RxXferCount--;
 8001912:	3b01      	subs	r3, #1
 8001914:	b29b      	uxth	r3, r3
 8001916:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001918:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800191a:	2120      	movs	r1, #32
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800191c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001920:	4620      	mov	r0, r4
 8001922:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001924:	d112      	bne.n	800194c <HAL_UART_Receive+0x94>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001926:	f7ff ff71 	bl	800180c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800192a:	b110      	cbz	r0, 8001932 <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 800192c:	2003      	movs	r0, #3
 800192e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001932:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001934:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001936:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001938:	b922      	cbnz	r2, 8001944 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800193a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800193e:	f825 3b02 	strh.w	r3, [r5], #2
 8001942:	e7da      	b.n	80018fa <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f825 3b01 	strh.w	r3, [r5], #1
 800194a:	e7d6      	b.n	80018fa <HAL_UART_Receive+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800194c:	f7ff ff5e 	bl	800180c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001950:	2800      	cmp	r0, #0
 8001952:	d1eb      	bne.n	800192c <HAL_UART_Receive+0x74>
 8001954:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001956:	6921      	ldr	r1, [r4, #16]
 8001958:	1c6a      	adds	r2, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800195a:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800195c:	b911      	cbnz	r1, 8001964 <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800195e:	702b      	strb	r3, [r5, #0]
 8001960:	4615      	mov	r5, r2
 8001962:	e7ca      	b.n	80018fa <HAL_UART_Receive+0x42>
 8001964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001968:	e7f9      	b.n	800195e <HAL_UART_Receive+0xa6>
      return  HAL_ERROR;
 800196a:	2001      	movs	r0, #1
 800196c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001970:	2002      	movs	r0, #2
}
 8001972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001978 <sensor_measure>:

#include "sensor.h"


double sensor_measure()
{
 8001978:	b510      	push	{r4, lr}
	 HAL_ADC_Start(&hadc1);
 800197a:	4c05      	ldr	r4, [pc, #20]	; (8001990 <sensor_measure+0x18>)
 800197c:	4620      	mov	r0, r4
 800197e:	f7fe fea5 	bl	80006cc <HAL_ADC_Start>
	 return (double)HAL_ADC_GetValue(&hadc1);
 8001982:	4620      	mov	r0, r4
 8001984:	f7fe fde2 	bl	800054c <HAL_ADC_GetValue>
 8001988:	f7fe fd22 	bl	80003d0 <__aeabi_ui2d>
}
 800198c:	bd10      	pop	{r4, pc}
 800198e:	bf00      	nop
 8001990:	20000048 	.word	0x20000048

08001994 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001994:	2228      	movs	r2, #40	; 0x28
{
 8001996:	b530      	push	{r4, r5, lr}
 8001998:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199a:	eb0d 0002 	add.w	r0, sp, r2
 800199e:	2100      	movs	r1, #0
 80019a0:	f000 fc1a 	bl	80021d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a4:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a6:	2410      	movs	r4, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a8:	eb0d 0002 	add.w	r0, sp, r2
 80019ac:	2100      	movs	r1, #0
 80019ae:	f000 fc13 	bl	80021d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b2:	4622      	mov	r2, r4
 80019b4:	2100      	movs	r1, #0
 80019b6:	a801      	add	r0, sp, #4
 80019b8:	f000 fc0e 	bl	80021d8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019bc:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019be:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c0:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019c4:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019c6:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c8:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ca:	f7ff f8dd 	bl	8000b88 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ce:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d0:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019d8:	4621      	mov	r1, r4
 80019da:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019dc:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019de:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e0:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019e2:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019e4:	f7ff fa98 	bl	8000f18 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019e8:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019ea:	9501      	str	r5, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80019ec:	9403      	str	r4, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ee:	f7ff fb65 	bl	80010bc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80019f2:	b015      	add	sp, #84	; 0x54
 80019f4:	bd30      	pop	{r4, r5, pc}
	...

080019f8 <main>:
{
 80019f8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80019fc:	b09b      	sub	sp, #108	; 0x6c
  HAL_Init();
 80019fe:	f7fe fd81 	bl	8000504 <HAL_Init>
  SystemClock_Config();
 8001a02:	f7ff ffc7 	bl	8001994 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a06:	2210      	movs	r2, #16
 8001a08:	2100      	movs	r1, #0
 8001a0a:	a813      	add	r0, sp, #76	; 0x4c
 8001a0c:	f000 fbe4 	bl	80021d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a10:	4bba      	ldr	r3, [pc, #744]	; (8001cfc <main+0x304>)
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a14:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = B1_Pin;
 8001a16:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1a:	f042 0210 	orr.w	r2, r2, #16
 8001a1e:	619a      	str	r2, [r3, #24]
 8001a20:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a22:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a24:	f002 0210 	and.w	r2, r2, #16
 8001a28:	9202      	str	r2, [sp, #8]
 8001a2a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a2e:	48b4      	ldr	r0, [pc, #720]	; (8001d00 <main+0x308>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a30:	f042 0220 	orr.w	r2, r2, #32
 8001a34:	619a      	str	r2, [r3, #24]
 8001a36:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	2701      	movs	r7, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3a:	f002 0220 	and.w	r2, r2, #32
 8001a3e:	9203      	str	r2, [sp, #12]
 8001a40:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	699a      	ldr	r2, [r3, #24]
  hadc1.Instance = ADC1;
 8001a44:	4daf      	ldr	r5, [pc, #700]	; (8001d04 <main+0x30c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	f042 0204 	orr.w	r2, r2, #4
 8001a4a:	619a      	str	r2, [r3, #24]
 8001a4c:	699a      	ldr	r2, [r3, #24]
  sConfig.Channel = ADC_CHANNEL_4;
 8001a4e:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	f002 0204 	and.w	r2, r2, #4
 8001a56:	9204      	str	r2, [sp, #16]
 8001a58:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	699a      	ldr	r2, [r3, #24]
  htim1.Init.Period = 20000-1;
 8001a5c:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a60:	f042 0208 	orr.w	r2, r2, #8
 8001a64:	619a      	str	r2, [r3, #24]
 8001a66:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	9305      	str	r3, [sp, #20]
 8001a70:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a72:	f7ff f877 	bl	8000b64 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a76:	4ba4      	ldr	r3, [pc, #656]	; (8001d08 <main+0x310>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a78:	a913      	add	r1, sp, #76	; 0x4c
 8001a7a:	48a4      	ldr	r0, [pc, #656]	; (8001d0c <main+0x314>)
  GPIO_InitStruct.Pin = B1_Pin;
 8001a7c:	9613      	str	r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a7e:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a82:	f7fe ff8f 	bl	80009a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a86:	2320      	movs	r3, #32
 8001a88:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2302      	movs	r3, #2
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	a913      	add	r1, sp, #76	; 0x4c
 8001a8e:	489c      	ldr	r0, [pc, #624]	; (8001d00 <main+0x308>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a92:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a96:	f7fe ff85 	bl	80009a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a9a:	4622      	mov	r2, r4
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	2028      	movs	r0, #40	; 0x28
 8001aa0:	f7fe ff2a 	bl	80008f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001aa4:	2028      	movs	r0, #40	; 0x28
 8001aa6:	f7fe ff5b 	bl	8000960 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8001aaa:	4b99      	ldr	r3, [pc, #612]	; (8001d10 <main+0x318>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aac:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8001aae:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ab0:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ab4:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ab6:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ab8:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001aba:	616c      	str	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001abc:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001abe:	612f      	str	r7, [r5, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ac0:	9413      	str	r4, [sp, #76]	; 0x4c
 8001ac2:	9414      	str	r4, [sp, #80]	; 0x50
 8001ac4:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ac6:	f7fe fe85 	bl	80007d4 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aca:	a913      	add	r1, sp, #76	; 0x4c
 8001acc:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_4;
 8001ace:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ad2:	9714      	str	r7, [sp, #80]	; 0x50
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ad4:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad6:	f7fe fd3d 	bl	8000554 <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ada:	4621      	mov	r1, r4
 8001adc:	2210      	movs	r2, #16
 8001ade:	a808      	add	r0, sp, #32
 8001ae0:	f000 fb7a 	bl	80021d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	221c      	movs	r2, #28
 8001ae8:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aea:	9406      	str	r4, [sp, #24]
 8001aec:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aee:	f000 fb73 	bl	80021d8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001af2:	221c      	movs	r2, #28
 8001af4:	4621      	mov	r1, r4
 8001af6:	a813      	add	r0, sp, #76	; 0x4c
 8001af8:	f000 fb6e 	bl	80021d8 <memset>
  htim1.Instance = TIM1;
 8001afc:	4f85      	ldr	r7, [pc, #532]	; (8001d14 <main+0x31c>)
 8001afe:	4b86      	ldr	r3, [pc, #536]	; (8001d18 <main+0x320>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b00:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  htim1.Instance = TIM1;
 8001b04:	603b      	str	r3, [r7, #0]
  htim1.Init.Prescaler = 8-1;
 8001b06:	2307      	movs	r3, #7
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b08:	f04f 0960 	mov.w	r9, #96	; 0x60
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b0c:	4638      	mov	r0, r7
  htim1.Init.Prescaler = 8-1;
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	9301      	str	r3, [sp, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b12:	60bc      	str	r4, [r7, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b14:	613c      	str	r4, [r7, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b16:	617c      	str	r4, [r7, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b18:	61bc      	str	r4, [r7, #24]
  htim1.Init.Period = 20000-1;
 8001b1a:	f8c7 b00c 	str.w	fp, [r7, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b1e:	f7ff fcab 	bl	8001478 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b22:	a908      	add	r1, sp, #32
 8001b24:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b26:	f8cd a020 	str.w	sl, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b2a:	f7ff fbb4 	bl	8001296 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b2e:	4638      	mov	r0, r7
 8001b30:	f7ff fcbc 	bl	80014ac <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b34:	a906      	add	r1, sp, #24
 8001b36:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b38:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3a:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b3c:	f7ff fda6 	bl	800168c <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b40:	220c      	movs	r2, #12
 8001b42:	a90c      	add	r1, sp, #48	; 0x30
 8001b44:	4638      	mov	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b46:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001b4a:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b4c:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b4e:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b50:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b52:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b54:	f7ff fcf0 	bl	8001538 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b58:	a913      	add	r1, sp, #76	; 0x4c
 8001b5a:	4638      	mov	r0, r7
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b5c:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b5e:	9414      	str	r4, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b60:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b62:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b64:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b66:	9618      	str	r6, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b68:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b6a:	f7ff fd69 	bl	8001640 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8001b6e:	4638      	mov	r0, r7
 8001b70:	f000 fa20 	bl	8001fb4 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b74:	4621      	mov	r1, r4
 8001b76:	2210      	movs	r2, #16
 8001b78:	a80c      	add	r0, sp, #48	; 0x30
 8001b7a:	f000 fb2d 	bl	80021d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b7e:	4621      	mov	r1, r4
 8001b80:	221c      	movs	r2, #28
 8001b82:	a813      	add	r0, sp, #76	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b84:	9408      	str	r4, [sp, #32]
 8001b86:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b88:	f000 fb26 	bl	80021d8 <memset>
  htim2.Instance = TIM2;
 8001b8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b90:	4e62      	ldr	r6, [pc, #392]	; (8001d1c <main+0x324>)
  htim2.Init.Prescaler = 8-1;
 8001b92:	9b01      	ldr	r3, [sp, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b94:	4630      	mov	r0, r6
  htim2.Init.Prescaler = 8-1;
 8001b96:	6073      	str	r3, [r6, #4]
  htim2.Instance = TIM2;
 8001b98:	6032      	str	r2, [r6, #0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9a:	60b4      	str	r4, [r6, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9c:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9e:	61b4      	str	r4, [r6, #24]
  htim2.Init.Period = 20000-1;
 8001ba0:	f8c6 b00c 	str.w	fp, [r6, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ba4:	f7ff fc68 	bl	8001478 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ba8:	a90c      	add	r1, sp, #48	; 0x30
 8001baa:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bac:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bb0:	f7ff fb71 	bl	8001296 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bb4:	4630      	mov	r0, r6
 8001bb6:	f7ff fc79 	bl	80014ac <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bba:	a908      	add	r1, sp, #32
 8001bbc:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbe:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc0:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bc2:	f7ff fd63 	bl	800168c <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc6:	4622      	mov	r2, r4
 8001bc8:	a913      	add	r1, sp, #76	; 0x4c
 8001bca:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bcc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  sConfigOC.Pulse = 0;
 8001bd0:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd2:	9415      	str	r4, [sp, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd4:	9417      	str	r4, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bd6:	f7ff fcaf 	bl	8001538 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bda:	4642      	mov	r2, r8
 8001bdc:	a913      	add	r1, sp, #76	; 0x4c
 8001bde:	4630      	mov	r0, r6
 8001be0:	f7ff fcaa 	bl	8001538 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8001be4:	4630      	mov	r0, r6
 8001be6:	f000 f9e5 	bl	8001fb4 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bea:	4621      	mov	r1, r4
 8001bec:	2210      	movs	r2, #16
 8001bee:	a80c      	add	r0, sp, #48	; 0x30
  htim3.Instance = TIM3;
 8001bf0:	4d4b      	ldr	r5, [pc, #300]	; (8001d20 <main+0x328>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf2:	f000 faf1 	bl	80021d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	221c      	movs	r2, #28
 8001bfa:	a813      	add	r0, sp, #76	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfc:	9408      	str	r4, [sp, #32]
 8001bfe:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c00:	f000 faea 	bl	80021d8 <memset>
  htim3.Instance = TIM3;
 8001c04:	4a47      	ldr	r2, [pc, #284]	; (8001d24 <main+0x32c>)
  htim3.Init.Prescaler = 8-1;
 8001c06:	9b01      	ldr	r3, [sp, #4]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c08:	4628      	mov	r0, r5
  htim3.Instance = TIM3;
 8001c0a:	602a      	str	r2, [r5, #0]
  htim3.Init.Prescaler = 8-1;
 8001c0c:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0e:	60ac      	str	r4, [r5, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c10:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c12:	61ac      	str	r4, [r5, #24]
  htim3.Init.Period = 20000-1;
 8001c14:	f8c5 b00c 	str.w	fp, [r5, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c18:	f7ff fc2e 	bl	8001478 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c1c:	a90c      	add	r1, sp, #48	; 0x30
 8001c1e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c20:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c24:	f7ff fb37 	bl	8001296 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c28:	4628      	mov	r0, r5
 8001c2a:	f7ff fc3f 	bl	80014ac <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c2e:	a908      	add	r1, sp, #32
 8001c30:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c32:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c34:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c36:	f7ff fd29 	bl	800168c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 9;
 8001c3a:	2309      	movs	r3, #9
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c3c:	4622      	mov	r2, r4
 8001c3e:	a913      	add	r1, sp, #76	; 0x4c
 8001c40:	4628      	mov	r0, r5
  sConfigOC.Pulse = 9;
 8001c42:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c44:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c48:	9415      	str	r4, [sp, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c4a:	9417      	str	r4, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c4c:	f7ff fc74 	bl	8001538 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c50:	4642      	mov	r2, r8
 8001c52:	a913      	add	r1, sp, #76	; 0x4c
 8001c54:	4628      	mov	r0, r5
  sConfigOC.Pulse = 0;
 8001c56:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c58:	f7ff fc6e 	bl	8001538 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	a913      	add	r1, sp, #76	; 0x4c
 8001c60:	4628      	mov	r0, r5
 8001c62:	f7ff fc69 	bl	8001538 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c66:	220c      	movs	r2, #12
 8001c68:	a913      	add	r1, sp, #76	; 0x4c
 8001c6a:	4628      	mov	r0, r5
 8001c6c:	f7ff fc64 	bl	8001538 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8001c70:	4628      	mov	r0, r5
 8001c72:	f000 f99f 	bl	8001fb4 <HAL_TIM_MspPostInit>
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c76:	f04f 090c 	mov.w	r9, #12
  huart2.Init.BaudRate = 115200;
 8001c7a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 8001c7e:	482a      	ldr	r0, [pc, #168]	; (8001d28 <main+0x330>)
  huart2.Init.BaudRate = 115200;
 8001c80:	492a      	ldr	r1, [pc, #168]	; (8001d2c <main+0x334>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c82:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001c84:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c88:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c8a:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	f8c0 9014 	str.w	r9, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c90:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c92:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c94:	f7ff fde2 	bl	800185c <HAL_UART_Init>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c98:	4621      	mov	r1, r4
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	f7ff fcba 	bl	8001614 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001ca0:	4641      	mov	r1, r8
 8001ca2:	4628      	mov	r0, r5
 8001ca4:	f7ff fcb6 	bl	8001614 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001ca8:	2108      	movs	r1, #8
 8001caa:	4628      	mov	r0, r5
 8001cac:	f7ff fcb2 	bl	8001614 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001cb0:	4649      	mov	r1, r9
 8001cb2:	4628      	mov	r0, r5
 8001cb4:	f7ff fcae 	bl	8001614 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001cb8:	4649      	mov	r1, r9
 8001cba:	4638      	mov	r0, r7
 8001cbc:	f7ff fcaa 	bl	8001614 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	4630      	mov	r0, r6
 8001cc4:	f7ff fca6 	bl	8001614 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001cc8:	4641      	mov	r1, r8
	  		serwo_grasper=1000*(value[12]-48)+100*(value[13]-48)+10*(value[14]-48)+1*(value[15]-48);
 8001cca:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8001d34 <main+0x33c>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001cce:	4630      	mov	r0, r6
 8001cd0:	f7ff fca0 	bl	8001614 <HAL_TIM_PWM_Start>
 8001cd4:	46c1      	mov	r9, r8
	  HAL_UART_Receive(&huart2, &value, 24, 20000); //odbieranie danych(odbior 24 bajtow)
 8001cd6:	4c16      	ldr	r4, [pc, #88]	; (8001d30 <main+0x338>)
 8001cd8:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001cdc:	2218      	movs	r2, #24
 8001cde:	4914      	ldr	r1, [pc, #80]	; (8001d30 <main+0x338>)
 8001ce0:	4811      	ldr	r0, [pc, #68]	; (8001d28 <main+0x330>)
 8001ce2:	f7ff fde9 	bl	80018b8 <HAL_UART_Receive>
	  		serwo_podstawa_obrot=1000*(value[0]-48)+100*(value[1]-48)+10*(value[2]-48)+1*(value[3]-48);//obrot podstawy
 8001ce6:	2064      	movs	r0, #100	; 0x64
 8001ce8:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8001cec:	7822      	ldrb	r2, [r4, #0]
 8001cee:	f894 e001 	ldrb.w	lr, [r4, #1]
 8001cf2:	3a30      	subs	r2, #48	; 0x30
 8001cf4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8001cf8:	e01e      	b.n	8001d38 <main+0x340>
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40010800 	.word	0x40010800
 8001d04:	20000048 	.word	0x20000048
 8001d08:	10110000 	.word	0x10110000
 8001d0c:	40011000 	.word	0x40011000
 8001d10:	40012400 	.word	0x40012400
 8001d14:	200000b8 	.word	0x200000b8
 8001d18:	40012c00 	.word	0x40012c00
 8001d1c:	200000f8 	.word	0x200000f8
 8001d20:	20000078 	.word	0x20000078
 8001d24:	40000400 	.word	0x40000400
 8001d28:	20000138 	.word	0x20000138
 8001d2c:	40004400 	.word	0x40004400
 8001d30:	20000180 	.word	0x20000180
 8001d34:	20000010 	.word	0x20000010
 8001d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8001d3c:	fb0c e202 	mla	r2, ip, r2, lr
 8001d40:	f04f 0e0a 	mov.w	lr, #10
 8001d44:	78a3      	ldrb	r3, [r4, #2]
 8001d46:	78e1      	ldrb	r1, [r4, #3]
 8001d48:	3b30      	subs	r3, #48	; 0x30
 8001d4a:	fb0e 2303 	mla	r3, lr, r3, r2
 8001d4e:	3930      	subs	r1, #48	; 0x30
 8001d50:	440b      	add	r3, r1
 8001d52:	494f      	ldr	r1, [pc, #316]	; (8001e90 <main+0x498>)
	  		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, serwo_podstawa_obrot);
 8001d54:	6832      	ldr	r2, [r6, #0]
	  		serwo_podstawa_obrot=1000*(value[0]-48)+100*(value[1]-48)+10*(value[2]-48)+1*(value[3]-48);//obrot podstawy
 8001d56:	600b      	str	r3, [r1, #0]
	  		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, serwo_podstawa_obrot);
 8001d58:	680b      	ldr	r3, [r1, #0]
 8001d5a:	6353      	str	r3, [r2, #52]	; 0x34
	  		var=1000*(value[4]-48)+100*(value[5]-48)+10*(value[6]-48)+1*(value[7]-48);
 8001d5c:	f894 a004 	ldrb.w	sl, [r4, #4]
 8001d60:	f894 b005 	ldrb.w	fp, [r4, #5]
 8001d64:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 8001d68:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
 8001d6c:	fb00 fb0b 	mul.w	fp, r0, fp
 8001d70:	fb0c ba0a 	mla	sl, ip, sl, fp
 8001d74:	79a3      	ldrb	r3, [r4, #6]
 8001d76:	79e1      	ldrb	r1, [r4, #7]
 8001d78:	3b30      	subs	r3, #48	; 0x30
 8001d7a:	fb0e a303 	mla	r3, lr, r3, sl
 8001d7e:	3930      	subs	r1, #48	; 0x30
 8001d80:	440b      	add	r3, r1
 8001d82:	4944      	ldr	r1, [pc, #272]	; (8001e94 <main+0x49c>)
	  		var2=3000-var;
 8001d84:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8001ea4 <main+0x4ac>
	  		var=1000*(value[4]-48)+100*(value[5]-48)+10*(value[6]-48)+1*(value[7]-48);
 8001d88:	600b      	str	r3, [r1, #0]
	  		var2=3000-var;
 8001d8a:	680b      	ldr	r3, [r1, #0]
 8001d8c:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8001d90:	3308      	adds	r3, #8
 8001d92:	f8ca 3000 	str.w	r3, [sl]
	  		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, var);
 8001d96:	680b      	ldr	r3, [r1, #0]
 8001d98:	6393      	str	r3, [r2, #56]	; 0x38
	  		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, var2);
 8001d9a:	f8da 2000 	ldr.w	r2, [sl]
 8001d9e:	682b      	ldr	r3, [r5, #0]
 8001da0:	635a      	str	r2, [r3, #52]	; 0x34
	  		serwo_2=1000*(value[8]-48)+100*(value[9]-48)+10*(value[10]-48)+1*(value[11]-48);
 8001da2:	f894 a008 	ldrb.w	sl, [r4, #8]
 8001da6:	f894 b009 	ldrb.w	fp, [r4, #9]
 8001daa:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 8001dae:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
 8001db2:	fb00 fb0b 	mul.w	fp, r0, fp
 8001db6:	fb0c ba0a 	mla	sl, ip, sl, fp
 8001dba:	7aa1      	ldrb	r1, [r4, #10]
 8001dbc:	7ae2      	ldrb	r2, [r4, #11]
 8001dbe:	3930      	subs	r1, #48	; 0x30
 8001dc0:	fb0e a101 	mla	r1, lr, r1, sl
 8001dc4:	3a30      	subs	r2, #48	; 0x30
 8001dc6:	4411      	add	r1, r2
 8001dc8:	4a33      	ldr	r2, [pc, #204]	; (8001e98 <main+0x4a0>)
 8001dca:	6011      	str	r1, [r2, #0]
	  		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, serwo_2);
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	639a      	str	r2, [r3, #56]	; 0x38
	  		serwo_grasper=1000*(value[12]-48)+100*(value[13]-48)+10*(value[14]-48)+1*(value[15]-48);
 8001dd0:	f894 a00c 	ldrb.w	sl, [r4, #12]
 8001dd4:	f894 b00d 	ldrb.w	fp, [r4, #13]
 8001dd8:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 8001ddc:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
 8001de0:	fb00 f00b 	mul.w	r0, r0, fp
 8001de4:	fb0c 000a 	mla	r0, ip, sl, r0
 8001de8:	7ba2      	ldrb	r2, [r4, #14]
 8001dea:	7be1      	ldrb	r1, [r4, #15]
 8001dec:	3a30      	subs	r2, #48	; 0x30
 8001dee:	fb0e 0202 	mla	r2, lr, r2, r0
 8001df2:	3930      	subs	r1, #48	; 0x30
 8001df4:	440a      	add	r2, r1
	  		serwo_obrot=1000*(value[16]-48)+100*(value[17]-48)+10*(value[18]-48)+1*(value[19]-48);
 8001df6:	2164      	movs	r1, #100	; 0x64
 8001df8:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	  		serwo_grasper=1000*(value[12]-48)+100*(value[13]-48)+10*(value[14]-48)+1*(value[15]-48);
 8001dfc:	f8c8 2000 	str.w	r2, [r8]
	  		if(serwo_grasper>8000)
 8001e00:	f8d8 2000 	ldr.w	r2, [r8]
 8001e04:	f5b2 5ffa 	cmp.w	r2, #8000	; 0x1f40
	  			serwo_grasper=serwo_grasper-9000;
 8001e08:	bf81      	itttt	hi
 8001e0a:	f8d8 2000 	ldrhi.w	r2, [r8]
 8001e0e:	f5a2 520c 	subhi.w	r2, r2, #8960	; 0x2300
 8001e12:	3a28      	subhi	r2, #40	; 0x28
 8001e14:	f8c8 2000 	strhi.w	r2, [r8]
	  		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, serwo_grasper);
 8001e18:	f8d9 2000 	ldr.w	r2, [r9]
 8001e1c:	63da      	str	r2, [r3, #60]	; 0x3c
	  		serwo_obrot=1000*(value[16]-48)+100*(value[17]-48)+10*(value[18]-48)+1*(value[19]-48);
 8001e1e:	7c20      	ldrb	r0, [r4, #16]
 8001e20:	f894 a011 	ldrb.w	sl, [r4, #17]
 8001e24:	3830      	subs	r0, #48	; 0x30
 8001e26:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 8001e2a:	fb01 fa0a 	mul.w	sl, r1, sl
 8001e2e:	fb0e aa00 	mla	sl, lr, r0, sl
 8001e32:	200a      	movs	r0, #10
 8001e34:	7ca2      	ldrb	r2, [r4, #18]
 8001e36:	f894 c013 	ldrb.w	ip, [r4, #19]
 8001e3a:	3a30      	subs	r2, #48	; 0x30
 8001e3c:	fb00 a202 	mla	r2, r0, r2, sl
 8001e40:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8001e44:	4462      	add	r2, ip
 8001e46:	f8df c060 	ldr.w	ip, [pc, #96]	; 8001ea8 <main+0x4b0>
 8001e4a:	f8cc 2000 	str.w	r2, [ip]
	  		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, serwo_obrot);
 8001e4e:	f8dc 2000 	ldr.w	r2, [ip]
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40
	  		grasper1=1000*(value[20]-48)+100*(value[21]-48)+10*(value[22]-48)+1*(value[23]-48);
 8001e54:	f894 c014 	ldrb.w	ip, [r4, #20]
 8001e58:	f894 a015 	ldrb.w	sl, [r4, #21]
 8001e5c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8001e60:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 8001e64:	fb01 f10a 	mul.w	r1, r1, sl
 8001e68:	fb0e 110c 	mla	r1, lr, ip, r1
 8001e6c:	7da3      	ldrb	r3, [r4, #22]
 8001e6e:	7de2      	ldrb	r2, [r4, #23]
 8001e70:	3b30      	subs	r3, #48	; 0x30
 8001e72:	fb00 1303 	mla	r3, r0, r3, r1
 8001e76:	3a30      	subs	r2, #48	; 0x30
 8001e78:	4413      	add	r3, r2
 8001e7a:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <main+0x4a4>)
 8001e7c:	6013      	str	r3, [r2, #0]
	  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, grasper1);
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
	  		Pressure = sensor_measure();
 8001e84:	f7ff fd78 	bl	8001978 <sensor_measure>
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <main+0x4a8>)
 8001e8a:	e9c3 0100 	strd	r0, r1, [r3]
	  HAL_UART_Receive(&huart2, &value, 24, 20000); //odbieranie danych(odbior 24 bajtow)
 8001e8e:	e723      	b.n	8001cd8 <main+0x2e0>
 8001e90:	20000018 	.word	0x20000018
 8001e94:	2000001c 	.word	0x2000001c
 8001e98:	2000000c 	.word	0x2000000c
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	20000178 	.word	0x20000178
 8001ea4:	20000020 	.word	0x20000020
 8001ea8:	20000014 	.word	0x20000014

08001eac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <HAL_MspInit+0x3c>)
{
 8001eae:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb0:	699a      	ldr	r2, [r3, #24]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	619a      	str	r2, [r3, #24]
 8001eb8:	699a      	ldr	r2, [r3, #24]
 8001eba:	f002 0201 	and.w	r2, r2, #1
 8001ebe:	9200      	str	r2, [sp, #0]
 8001ec0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	69da      	ldr	r2, [r3, #28]
 8001ec4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ec8:	61da      	str	r2, [r3, #28]
 8001eca:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ecc:	4a07      	ldr	r2, [pc, #28]	; (8001eec <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ed6:	6853      	ldr	r3, [r2, #4]
 8001ed8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001edc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ee0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee2:	b002      	add	sp, #8
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40010000 	.word	0x40010000

08001ef0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ef0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef2:	2410      	movs	r4, #16
{
 8001ef4:	4605      	mov	r5, r0
 8001ef6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	4622      	mov	r2, r4
 8001efa:	2100      	movs	r1, #0
 8001efc:	a802      	add	r0, sp, #8
 8001efe:	f000 f96b 	bl	80021d8 <memset>
  if(hadc->Instance==ADC1)
 8001f02:	682a      	ldr	r2, [r5, #0]
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <HAL_ADC_MspInit+0x54>)
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d11a      	bne.n	8001f40 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f0a:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001f0e:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f16:	619a      	str	r2, [r3, #24]
 8001f18:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1a:	480b      	ldr	r0, [pc, #44]	; (8001f48 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f1c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001f20:	9200      	str	r2, [sp, #0]
 8001f22:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f24:	699a      	ldr	r2, [r3, #24]
 8001f26:	f042 0204 	orr.w	r2, r2, #4
 8001f2a:	619a      	str	r2, [r3, #24]
 8001f2c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f2e:	9402      	str	r4, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3c:	f7fe fd32 	bl	80009a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f40:	b007      	add	sp, #28
 8001f42:	bd30      	pop	{r4, r5, pc}
 8001f44:	40012400 	.word	0x40012400
 8001f48:	40010800 	.word	0x40010800

08001f4c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001f4c:	6803      	ldr	r3, [r0, #0]
 8001f4e:	4a16      	ldr	r2, [pc, #88]	; (8001fa8 <HAL_TIM_Base_MspInit+0x5c>)
{
 8001f50:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d10b      	bne.n	8001f6e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_TIM_Base_MspInit+0x60>)
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f5e:	619a      	str	r2, [r3, #24]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f6a:	b004      	add	sp, #16
 8001f6c:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 8001f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f72:	d10b      	bne.n	8001f8c <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f74:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001f78:	69da      	ldr	r2, [r3, #28]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	61da      	str	r2, [r3, #28]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	9302      	str	r3, [sp, #8]
 8001f88:	9b02      	ldr	r3, [sp, #8]
 8001f8a:	e7ee      	b.n	8001f6a <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM3)
 8001f8c:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <HAL_TIM_Base_MspInit+0x64>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d1eb      	bne.n	8001f6a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_TIM_Base_MspInit+0x60>)
 8001f94:	69da      	ldr	r2, [r3, #28]
 8001f96:	f042 0202 	orr.w	r2, r2, #2
 8001f9a:	61da      	str	r2, [r3, #28]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	9303      	str	r3, [sp, #12]
 8001fa4:	9b03      	ldr	r3, [sp, #12]
}
 8001fa6:	e7e0      	b.n	8001f6a <HAL_TIM_Base_MspInit+0x1e>
 8001fa8:	40012c00 	.word	0x40012c00
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40000400 	.word	0x40000400

08001fb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	2210      	movs	r2, #16
{
 8001fb6:	b510      	push	{r4, lr}
 8001fb8:	4604      	mov	r4, r0
 8001fba:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	eb0d 0002 	add.w	r0, sp, r2
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	f000 f909 	bl	80021d8 <memset>
  if(htim->Instance==TIM1)
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	4a27      	ldr	r2, [pc, #156]	; (8002068 <HAL_TIM_MspPostInit+0xb4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d115      	bne.n	8001ffa <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fce:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_TIM_MspPostInit+0xb8>)
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	f042 0204 	orr.w	r2, r2, #4
 8001fd6:	619a      	str	r2, [r3, #24]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	9b00      	ldr	r3, [sp, #0]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001fe2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fe6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fea:	4821      	ldr	r0, [pc, #132]	; (8002070 <HAL_TIM_MspPostInit+0xbc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	a904      	add	r1, sp, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff2:	f7fe fcd7 	bl	80009a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ff6:	b008      	add	sp, #32
 8001ff8:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM2)
 8001ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffe:	d10c      	bne.n	800201a <HAL_TIM_MspPostInit+0x66>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002000:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002004:	699a      	ldr	r2, [r3, #24]
 8002006:	f042 0204 	orr.w	r2, r2, #4
 800200a:	619a      	str	r2, [r3, #24]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	9301      	str	r3, [sp, #4]
 8002014:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002016:	2303      	movs	r3, #3
 8002018:	e7e5      	b.n	8001fe6 <HAL_TIM_MspPostInit+0x32>
  else if(htim->Instance==TIM3)
 800201a:	4a16      	ldr	r2, [pc, #88]	; (8002074 <HAL_TIM_MspPostInit+0xc0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d1ea      	bne.n	8001ff6 <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_TIM_MspPostInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002024:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002026:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002028:	f042 0204 	orr.w	r2, r2, #4
 800202c:	619a      	str	r2, [r3, #24]
 800202e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	480f      	ldr	r0, [pc, #60]	; (8002070 <HAL_TIM_MspPostInit+0xbc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	f002 0204 	and.w	r2, r2, #4
 8002036:	9202      	str	r2, [sp, #8]
 8002038:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203a:	699a      	ldr	r2, [r3, #24]
 800203c:	f042 0208 	orr.w	r2, r2, #8
 8002040:	619a      	str	r2, [r3, #24]
 8002042:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	9303      	str	r3, [sp, #12]
 800204c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800204e:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002052:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	f7fe fca6 	bl	80009a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002058:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800205c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002060:	a904      	add	r1, sp, #16
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <HAL_TIM_MspPostInit+0xc4>)
 8002064:	e7c5      	b.n	8001ff2 <HAL_TIM_MspPostInit+0x3e>
 8002066:	bf00      	nop
 8002068:	40012c00 	.word	0x40012c00
 800206c:	40021000 	.word	0x40021000
 8002070:	40010800 	.word	0x40010800
 8002074:	40000400 	.word	0x40000400
 8002078:	40010c00 	.word	0x40010c00

0800207c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800207c:	b510      	push	{r4, lr}
 800207e:	4604      	mov	r4, r0
 8002080:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002082:	2210      	movs	r2, #16
 8002084:	2100      	movs	r1, #0
 8002086:	a802      	add	r0, sp, #8
 8002088:	f000 f8a6 	bl	80021d8 <memset>
  if(huart->Instance==USART2)
 800208c:	6822      	ldr	r2, [r4, #0]
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_UART_MspInit+0x58>)
 8002090:	429a      	cmp	r2, r3
 8002092:	d11c      	bne.n	80020ce <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002094:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002098:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 800209c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020a0:	61da      	str	r2, [r3, #28]
 80020a2:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a4:	480c      	ldr	r0, [pc, #48]	; (80020d8 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80020a6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80020aa:	9200      	str	r2, [sp, #0]
 80020ac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	699a      	ldr	r2, [r3, #24]
 80020b0:	f042 0204 	orr.w	r2, r2, #4
 80020b4:	619a      	str	r2, [r3, #24]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020c0:	230c      	movs	r3, #12
 80020c2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	f7fe fc6b 	bl	80009a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020ce:	b006      	add	sp, #24
 80020d0:	bd10      	pop	{r4, pc}
 80020d2:	bf00      	nop
 80020d4:	40004400 	.word	0x40004400
 80020d8:	40010800 	.word	0x40010800

080020dc <NMI_Handler>:
 80020dc:	4770      	bx	lr

080020de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020de:	e7fe      	b.n	80020de <HardFault_Handler>

080020e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e0:	e7fe      	b.n	80020e0 <MemManage_Handler>

080020e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e2:	e7fe      	b.n	80020e2 <BusFault_Handler>

080020e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e4:	e7fe      	b.n	80020e4 <UsageFault_Handler>

080020e6 <SVC_Handler>:
 80020e6:	4770      	bx	lr

080020e8 <DebugMon_Handler>:
 80020e8:	4770      	bx	lr

080020ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ea:	4770      	bx	lr

080020ec <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ec:	f7fe ba1c 	b.w	8000528 <HAL_IncTick>

080020f0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80020f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020f4:	f7fe bd3c 	b.w	8000b70 <HAL_GPIO_EXTI_IRQHandler>

080020f8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80020f8:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <SystemInit+0x40>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	4a0d      	ldr	r2, [pc, #52]	; (800213c <SystemInit+0x44>)
 8002106:	400a      	ands	r2, r1
 8002108:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002110:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002114:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800211c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002124:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002126:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800212a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800212c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002130:	4b03      	ldr	r3, [pc, #12]	; (8002140 <SystemInit+0x48>)
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	f8ff0000 	.word	0xf8ff0000
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002144:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002146:	e003      	b.n	8002150 <LoopCopyDataInit>

08002148 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800214a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800214c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800214e:	3104      	adds	r1, #4

08002150 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002150:	480a      	ldr	r0, [pc, #40]	; (800217c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002154:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002156:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002158:	d3f6      	bcc.n	8002148 <CopyDataInit>
  ldr r2, =_sbss
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800215c:	e002      	b.n	8002164 <LoopFillZerobss>

0800215e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002160:	f842 3b04 	str.w	r3, [r2], #4

08002164 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002166:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002168:	d3f9      	bcc.n	800215e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800216a:	f7ff ffc5 	bl	80020f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800216e:	f000 f80f 	bl	8002190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002172:	f7ff fc41 	bl	80019f8 <main>
  bx lr
 8002176:	4770      	bx	lr
  ldr r3, =_sidata
 8002178:	08002230 	.word	0x08002230
  ldr r0, =_sdata
 800217c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002180:	20000028 	.word	0x20000028
  ldr r2, =_sbss
 8002184:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 8002188:	20000198 	.word	0x20000198

0800218c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800218c:	e7fe      	b.n	800218c <ADC1_2_IRQHandler>
	...

08002190 <__libc_init_array>:
 8002190:	b570      	push	{r4, r5, r6, lr}
 8002192:	2500      	movs	r5, #0
 8002194:	4e0c      	ldr	r6, [pc, #48]	; (80021c8 <__libc_init_array+0x38>)
 8002196:	4c0d      	ldr	r4, [pc, #52]	; (80021cc <__libc_init_array+0x3c>)
 8002198:	1ba4      	subs	r4, r4, r6
 800219a:	10a4      	asrs	r4, r4, #2
 800219c:	42a5      	cmp	r5, r4
 800219e:	d109      	bne.n	80021b4 <__libc_init_array+0x24>
 80021a0:	f000 f822 	bl	80021e8 <_init>
 80021a4:	2500      	movs	r5, #0
 80021a6:	4e0a      	ldr	r6, [pc, #40]	; (80021d0 <__libc_init_array+0x40>)
 80021a8:	4c0a      	ldr	r4, [pc, #40]	; (80021d4 <__libc_init_array+0x44>)
 80021aa:	1ba4      	subs	r4, r4, r6
 80021ac:	10a4      	asrs	r4, r4, #2
 80021ae:	42a5      	cmp	r5, r4
 80021b0:	d105      	bne.n	80021be <__libc_init_array+0x2e>
 80021b2:	bd70      	pop	{r4, r5, r6, pc}
 80021b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021b8:	4798      	blx	r3
 80021ba:	3501      	adds	r5, #1
 80021bc:	e7ee      	b.n	800219c <__libc_init_array+0xc>
 80021be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021c2:	4798      	blx	r3
 80021c4:	3501      	adds	r5, #1
 80021c6:	e7f2      	b.n	80021ae <__libc_init_array+0x1e>
 80021c8:	08002228 	.word	0x08002228
 80021cc:	08002228 	.word	0x08002228
 80021d0:	08002228 	.word	0x08002228
 80021d4:	0800222c 	.word	0x0800222c

080021d8 <memset>:
 80021d8:	4603      	mov	r3, r0
 80021da:	4402      	add	r2, r0
 80021dc:	4293      	cmp	r3, r2
 80021de:	d100      	bne.n	80021e2 <memset+0xa>
 80021e0:	4770      	bx	lr
 80021e2:	f803 1b01 	strb.w	r1, [r3], #1
 80021e6:	e7f9      	b.n	80021dc <memset+0x4>

080021e8 <_init>:
 80021e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ea:	bf00      	nop
 80021ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ee:	bc08      	pop	{r3}
 80021f0:	469e      	mov	lr, r3
 80021f2:	4770      	bx	lr

080021f4 <_fini>:
 80021f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f6:	bf00      	nop
 80021f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fa:	bc08      	pop	{r3}
 80021fc:	469e      	mov	lr, r3
 80021fe:	4770      	bx	lr
